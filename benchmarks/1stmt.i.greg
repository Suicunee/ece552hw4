
;; Function label_rtx

;; 1 regs to allocate: 68
;; 68 conflicts: 68 0 8 14 15
;; 68 preferences: 24

;; Register dispositions:
68 in 24  69 in 8  71 in 8  72 in 8  

;; Hard regs used:  0 8 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 10 "" NOTE_INSN_DELETED)

(note 10 8 11 "" NOTE_INSN_DELETED)

(insn 11 10 12 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:QI (plus:SI (reg/v:SI 24 %i0)
                    (const_int 12))))) 99 {zero_extendqisi2+1} (insn_list 4 (nil))
    (nil))

(insn 12 11 13 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 40))) 16 {sleu+1} (insn_list 11 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 13 12 16 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 18)
            (pc))) 55 {bleu+1} (insn_list 12 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(call_insn 16 13 17 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("abort")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(barrier 17 16 18)

(code_label 18 17 21 2 "")

(insn 21 18 22 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 64)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 64)))
        (nil)))

(insn 22 21 23 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 21 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 23 22 33 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 30)
            (pc))) 55 {bleu+1} (insn_list 22 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(call_insn 33 23 35 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 35 33 39 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 33 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 39 35 41 (set (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 64)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 35 (nil))
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 41 39 43 (set (reg/i:SI 24 %i0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 43 41 29 (set (pc)
        (label_ref 50)) 205 {jump} (nil)
    (nil))

(barrier 29 43 30)

(code_label 30 29 26 3 "")

(insn 26 30 50 (set (reg/i:SI 24 %i0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 64)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(code_label 50 26 49 4 "")

(insn 49 50 51 (use (reg/i:SI 24 %i0)) -1 (nil)
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 51 49 0 "" NOTE_INSN_DELETED)

;; Function emit_jump

;; Register dispositions:
68 in 24  

;; Hard regs used:  8 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 10 "" NOTE_INSN_BLOCK_BEG)

(call_insn 10 8 13 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 13 10 14 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (insn_list 4 (nil))
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 14 13 16 (use (reg:SI 8 %o0)) -1 (insn_list 13 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 16 14 18 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_jump")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 18 16 20 "" NOTE_INSN_DELETED)

(insn 20 18 21 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 16 (nil))
    (nil))

(insn 21 20 23 (use (reg:SI 8 %o0)) -1 (insn_list 20 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 23 21 26 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_jump_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(call_insn 26 23 28 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_barrier")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 28 26 32 "" NOTE_INSN_BLOCK_END)

(note 32 28 0 "" NOTE_INSN_DELETED)

;; Function expand_label

;; 2 regs to allocate: 72 68
;; 68 conflicts: 68 72 0 8 9 10 14 15
;; 68 preferences: 24
;; 72 conflicts: 68 72 0 8 14 15

;; Register dispositions:
68 in 24  69 in 8  72 in 16  73 in 8  74 in 10  77 in 9  


;; Hard regs used:  0 8 9 10 15 16 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 11 "" NOTE_INSN_BLOCK_BEG)

(call_insn 11 8 14 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 14 11 15 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (insn_list 4 (nil))
    (nil))

(insn 15 14 17 (use (reg:SI 8 %o0)) -1 (insn_list 14 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 17 15 19 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 19 17 21 "" NOTE_INSN_DELETED)

(insn 21 19 22 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 17 (nil))
    (nil))

(insn 22 21 24 (use (reg:SI 8 %o0)) -1 (insn_list 21 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 24 22 26 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 26 24 29 (set (reg:SI 16 %l0)
        (high:SI (symbol_ref:SI ("stack_block_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("stack_block_stack")))
        (nil)))

(insn 29 26 30 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("stack_block_stack"))))) 66 {movsi+1} (insn_list 26 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("stack_block_stack"))))
        (nil)))

(insn 30 29 31 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 29 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 31 30 33 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 60)
            (pc))) 55 {bleu+1} (insn_list 30 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 33 31 35 "" NOTE_INSN_DELETED)

(insn 35 33 36 (set (reg:SI 8 %o0)
        (const_int 8)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 8)
        (nil)))

(insn 36 35 38 (use (reg:SI 8 %o0)) -1 (insn_list 35 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 38 36 40 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("oballoc")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 40 38 45 (set (reg/v:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 38 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 45 40 47 (set (reg:SI 10 %o2)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("stack_block_stack"))))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 16 %l0)
        (nil)))

(insn 47 45 48 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 36)))) 66 {movsi+1} (insn_list 45 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 8 %o0))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 10 %o2)
                    (const_int 36)))
            (nil))))

(insn 48 47 55 (set (mem/s:SI (reg/v:SI 8 %o0))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 40 (insn_list 47 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 55 48 58 (set (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 36)))
        (reg/v:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 58 55 60 (set (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 4)))
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (expr_list:REG_DEAD (reg/v:SI 8 %o0)
            (nil))))

(code_label 60 58 62 7 "")

(note 62 60 66 "" NOTE_INSN_BLOCK_END)

(note 66 62 0 "" NOTE_INSN_DELETED)

;; Function expand_goto

;; Register dispositions:
68 in 24  69 in 9  

;; Hard regs used:  8 9 10 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 10 "" NOTE_INSN_DELETED)

(insn 10 8 11 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (insn_list 4 (nil))
    (nil))

(insn 11 10 13 (use (reg:SI 8 %o0)) -1 (insn_list 10 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 13 11 15 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 15 13 17 (set (reg:SI 9 %o1)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 13 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 17 15 20 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 20 17 23 (set (reg:SI 9 %o1)
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 15 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 23 20 18 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 18 23 21 (use (reg:SI 8 %o0)) -1 (insn_list 17 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 21 18 24 (use (reg:SI 9 %o1)) -1 (insn_list 20 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 24 21 26 (use (reg:SI 10 %o2)) -1 (insn_list 23 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 26 24 31 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_goto_internal")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 31 26 0 "" NOTE_INSN_DELETED)

;; Function expand_goto_internal

;; 7 regs to allocate: 82 83 71 68 72 69 70
;; 68 conflicts: 68 69 70 71 72 82 83 0 8 9 10 14 15 25 26
;; 68 preferences: 24
;; 69 conflicts: 68 69 70 71 72 82 83 0 8 9 10 14 15 26
;; 69 preferences: 25
;; 70 conflicts: 68 69 70 72 0 8 9 14
;; 70 preferences: 10 26
;; 71 conflicts: 68 69 71 72 82 83 0 8 9 14 15
;; 72 conflicts: 68 69 70 71 72 82 83 0 8 9 14 15
;; 82 conflicts: 68 69 71 72 82 0 14
;; 83 conflicts: 68 69 71 72 83 0 14
;; 83 preferences: 8

;; Register dispositions:
68 in 24  69 in 25  70 in 10  71 in 26  72 in 16  73 in 8  
76 in 8  78 in 8  79 in 8  80 in 9  81 in 8  82 in 8  
83 in 8  85 in 8  87 in 9  88 in 8  89 in 9  90 in 8  
92 in 8  93 in 9  94 in 8  

;; Hard regs used:  0 8 9 10 15 16 24 25 26 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 6 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(insn 6 4 8 (set (reg/v:SI 25 %i1)
        (reg:SI 25 %i1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 25 %i1)
        (nil)))

(insn 8 6 9 (set (reg/v:SI 10 %o2)
        (reg:SI 26 %i2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 26 %i2)
        (nil)))

(note 9 8 10 "" NOTE_INSN_FUNCTION_BEG)

(note 10 9 12 "" NOTE_INSN_DELETED)

(note 12 10 15 "" NOTE_INSN_BLOCK_BEG)

(insn 15 12 18 (set (reg/v:SI 16 %l0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(note 18 15 19 "" NOTE_INSN_DELETED)

(note 19 18 20 "" NOTE_INSN_DELETED)

(insn 20 19 21 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg/v:SI 25 %i1)))) 95 {zero_extendhisi2+1} (insn_list 6 (nil))
    (nil))

(insn 21 20 22 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 17))) 16 {sleu+1} (insn_list 20 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 22 21 25 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 27)
            (pc))) 55 {bleu+1} (insn_list 21 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(call_insn 25 22 26 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("abort")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(barrier 26 25 27)

(code_label 27 26 30 10 "")

(insn 30 27 31 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 25 %i1)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 25 %i1)
                (const_int 8)))
        (nil)))

(insn 31 30 32 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 30 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 32 31 34 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 135)
            (pc))) 55 {bleu+1} (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 34 32 35 "" NOTE_INSN_BLOCK_BEG)

(insn 35 34 38 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("block_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("block_stack")))
        (nil)))

(insn 38 35 179 (set (reg/v:SI 26 %i2)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("block_stack"))))) 66 {movsi+1} (insn_list 35 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 179 38 180 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 26 %i2)
            (const_int 0))) 16 {sleu+1} (insn_list 38 (nil))
    (nil))

(jump_insn 180 179 39 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 93)
            (pc))) 55 {bleu+1} (insn_list 179 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 39 180 87 "" NOTE_INSN_LOOP_BEG)

(code_label 87 39 44 18 "")

(note 44 87 46 "" NOTE_INSN_DELETED)

(insn 46 44 48 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 26 %i2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 26 %i2)
                (const_int 20)))
        (nil)))

(insn 48 46 50 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 46 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 50 48 51 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 25 %i1)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 25 %i1)
                (const_int 4)))
        (nil)))

(insn 51 50 52 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 48 (insn_list 50 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 52 51 59 (set (pc)
        (if_then_else (lt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 93)
            (pc))) 55 {bleu+1} (insn_list 51 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 59 52 60 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 26 %i2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (nil))

(insn 60 59 61 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 59 (nil))
    (nil))

(jump_insn 61 60 64 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 65)
            (pc))) 55 {bleu+1} (insn_list 60 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 64 61 65 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(code_label 65 64 68 16 "")

(insn 68 65 69 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 26 %i2)
                (const_int 28)))) 66 {movsi+1} (nil)
    (nil))

(insn 69 68 70 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 68 (nil))
    (nil))

(jump_insn 70 69 73 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 84)
            (pc))) 55 {bleu+1} (insn_list 69 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 73 70 76 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 76 73 74 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 74 76 77 (use (reg:SI 8 %o0)) -1 (insn_list 73 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 77 74 79 (use (reg:SI 9 %o1)) -1 (insn_list 76 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 79 77 83 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_cleanups")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 83 79 84 "" NOTE_INSN_LOOP_CONT)

(code_label 84 83 86 14 "")

(insn 86 84 183 (set (reg/v:SI 26 %i2)
        (mem/s:SI (plus:SI (reg/v:SI 26 %i2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(note 183 86 41 "" NOTE_INSN_LOOP_VTOP)

(insn 41 183 42 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 26 %i2)
            (const_int 0))) 16 {sleu+1} (insn_list 86 (nil))
    (nil))

(jump_insn 42 41 92 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 87)
            (pc))) 55 {bleu+1} (insn_list 41 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 92 42 93 "" NOTE_INSN_LOOP_END)

(code_label 93 92 95 13 "")

(insn 95 93 96 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 16 %l0)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 96 95 98 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 108)
            (pc))) 55 {bleu+1} (insn_list 95 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 98 96 101 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("stack_pointer_rtx")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("stack_pointer_rtx")))
        (nil)))

(insn 101 98 104 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("stack_pointer_rtx"))))) 66 {movsi+1} (insn_list 98 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 104 101 102 (set (reg:SI 9 %o1)
        (reg/v:SI 16 %l0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 102 104 105 (use (reg:SI 8 %o0)) -1 (insn_list 101 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 105 102 107 (use (reg:SI 9 %o1)) -1 (insn_list 104 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 107 105 108 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_move_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(code_label 108 107 110 19 "")

(insn 110 108 111 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 111 110 113 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 167)
            (pc))) 55 {bleu+1} (insn_list 110 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 113 111 115 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (nil)))

(insn 115 113 116 (set (reg:SI 8 %o0)
        (const_int 524288)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (const_int 524288)
        (nil)))

(note 116 115 117 "" NOTE_INSN_DELETED)

(insn 117 116 118 (set (reg:CC 0 %g0)
        (compare:CC (and:SI (reg:SI 9 %o1)
                (reg:SI 8 %o0))
            (const_int 0))) 162 {xorsi3+5} (insn_list 115 (insn_list 113 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(jump_insn 118 117 121 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 167)
            (pc))) 55 {bleu+1} (insn_list 117 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 121 118 122 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 36)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 122 121 123 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("*LC0")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC0")))
        (nil)))

(insn 123 122 126 (set (reg:SI 8 %o0)
        (lo_sum:SI (reg:SI 8 %o0)
            (symbol_ref:SI ("*LC0")))) 73 {movdi-2} (insn_list 122 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC0"))
            (nil))))

(insn 126 123 124 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 20)))) 66 {movsi+1} (insn_list 121 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 124 126 127 (use (reg:SI 8 %o0)) -1 (insn_list 123 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 127 124 129 (use (reg:SI 9 %o1)) -1 (insn_list 126 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 129 127 132 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 132 129 133 "" NOTE_INSN_BLOCK_END)

(jump_insn 133 132 134 (set (pc)
        (label_ref 167)) 205 {jump} (nil)
    (nil))

(barrier 134 133 135)

(code_label 135 134 138 11 "")

(insn 138 135 141 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (nil))

(insn 141 138 144 (set (reg:SI 9 %o1)
        (reg/v:SI 25 %i1)) 66 {movsi+1} (nil)
    (nil))

(insn 144 141 139 (set (reg:SI 10 %o2)
        (reg/v:SI 10 %o2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 10 %o2)
        (nil)))

(insn 139 144 142 (use (reg:SI 8 %o0)) -1 (insn_list 138 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 142 139 145 (use (reg:SI 9 %o1)) -1 (insn_list 141 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 145 142 147 (use (reg:SI 10 %o2)) -1 (insn_list 144 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 147 145 149 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("expand_fixup")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 149 147 150 "" NOTE_INSN_DELETED)

(insn 150 149 151 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 147 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 151 150 153 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 167)
            (pc))) 55 {bleu+1} (insn_list 150 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 153 151 154 "" NOTE_INSN_DELETED)

(insn 154 153 155 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 155 154 158 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 167)
            (pc))) 55 {bleu+1} (insn_list 154 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 158 155 160 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (nil)))

(insn 160 158 161 (set (reg:SI 9 %o1)
        (const_int 16384)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (const_int 16384)
        (nil)))

(insn 161 160 163 (set (reg:SI 8 %o0)
        (ior:SI (reg:SI 8 %o0)
            (reg:SI 9 %o1))) 151 {iorsi3} (insn_list 158 (insn_list 160 (nil)))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (expr_list:REG_DEAD (reg:SI 9 %o1)
                (nil)))))

(insn 163 161 167 (set (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 161 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg/v:SI 24 %i0)
            (nil))))

(code_label 167 163 170 21 "")

(insn 170 167 171 (set (reg:SI 8 %o0)
        (reg/v:SI 25 %i1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 25 %i1)
        (nil)))

(insn 171 170 173 (use (reg:SI 8 %o0)) -1 (insn_list 170 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 173 171 175 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("emit_jump")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 175 173 184 "" NOTE_INSN_BLOCK_END)

(note 184 175 0 "" NOTE_INSN_DELETED)

;; Function expand_fixup

;; 10 regs to allocate: 103 71 75 88 115 72 117 69 70 68
;; 68 conflicts: 68 69 70 71 72 75 88 103 115 0 8 14 15 25 26
;; 68 preferences: 24
;; 69 conflicts: 68 69 70 71 72 75 88 103 115 0 8 14 15 26
;; 69 preferences: 25
;; 70 conflicts: 68 69 70 71 72 75 88 103 115 0 8 14 15
;; 70 preferences: 26
;; 71 conflicts: 68 69 70 71 72 103 115 117 0 8 9 10 14 15
;; 71 preferences: 24
;; 72 conflicts: 68 69 70 71 72 103 0 8 14
;; 75 conflicts: 68 69 70 75 0 8 14
;; 88 conflicts: 68 69 70 88 0 8 14
;; 103 conflicts: 68 69 70 71 72 103 0 8 14
;; 115 conflicts: 68 69 70 71 115 117 0 8 9 10 14 15
;; 117 conflicts: 71 115 117 14
;; 117 preferences: 8

;; Register dispositions:
68 in 17  69 in 25  70 in 26  71 in 24  72 in 10  74 in 8  
75 in 9  79 in 8  83 in 8  85 in 8  87 in 8  88 in 9  
92 in 8  96 in 8  100 in 8  102 in 8  103 in 9  105 in 8  
106 in 8  108 in 8  112 in 8  113 in 8  114 in 8  115 in 16  
117 in 8  118 in 8  119 in 8  121 in 9  122 in 8  

;; Hard regs used:  0 8 9 10 15 16 17 24 25 26 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 6 (set (reg/v:SI 17 %l1)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(insn 6 4 8 (set (reg/v:SI 25 %i1)
        (reg:SI 25 %i1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 25 %i1)
        (nil)))

(insn 8 6 9 (set (reg/v:SI 26 %i2)
        (reg:SI 26 %i2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 26 %i2)
        (nil)))

(note 9 8 10 "" NOTE_INSN_FUNCTION_BEG)

(note 10 9 12 "" NOTE_INSN_DELETED)

(note 12 10 14 "" NOTE_INSN_BLOCK_BEG)

(insn 14 12 17 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 17 14 18 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (insn_list 14 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 18 17 19 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 17 (nil))
    (nil))

(jump_insn 19 18 25 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 46)
            (pc))) 55 {bleu+1} (insn_list 18 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 25 19 26 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 16)))
        (nil)))

(insn 26 25 27 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 25 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 27 26 33 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 38)
            (pc))) 55 {bleu+1} (insn_list 26 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 33 27 34 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 34 33 35 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 33 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 35 34 38 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 46)
            (pc))) 55 {bleu+1} (insn_list 34 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(code_label 38 35 40 29 "")

(insn 40 38 43 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 43 40 44 (set (reg/v:SI 10 %o2)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (insn_list 40 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 44 43 45 (set (pc)
        (label_ref 93)) 205 {jump} (nil)
    (nil))

(barrier 45 44 46)

(code_label 46 45 48 28 "")

(insn 48 46 51 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 51 48 52 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 48 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 52 51 53 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 51 (nil))
    (nil))

(jump_insn 53 52 59 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 88)
            (pc))) 55 {bleu+1} (insn_list 52 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 59 53 60 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 16)))
        (nil)))

(insn 60 59 61 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 59 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 61 60 67 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 80)
            (pc))) 55 {bleu+1} (insn_list 60 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 67 61 68 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 20)))
        (nil)))

(insn 68 67 69 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 67 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 69 68 75 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 80)
            (pc))) 55 {bleu+1} (insn_list 68 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 75 69 76 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 24)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 76 75 77 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 75 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 77 76 80 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 88)
            (pc))) 55 {bleu+1} (insn_list 76 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(code_label 80 77 82 32 "")

(insn 82 80 85 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 85 82 86 (set (reg/v:SI 10 %o2)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 82 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 86 85 87 (set (pc)
        (label_ref 93)) 205 {jump} (nil)
    (nil))

(barrier 87 86 88)

(code_label 88 87 91 31 "")

(insn 91 88 93 (set (reg/v:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(code_label 93 91 95 30 "")

(insn 95 93 96 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 10 %o2)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 96 95 98 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 174)
            (pc))) 55 {bleu+1} (insn_list 95 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 98 96 100 "" NOTE_INSN_BLOCK_BEG)

(insn 100 98 102 (set (reg/v:SI 9 %o1)
        (mem/s:SI (reg/v:SI 10 %o2))) 66 {movsi+1} (nil)
    (nil))

(insn 102 100 105 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("block_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("block_stack")))
        (nil)))

(insn 105 102 312 (set (reg/v:SI 24 %i0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("block_stack"))))) 66 {movsi+1} (insn_list 102 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 312 105 313 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 100 (nil))
    (nil))

(jump_insn 313 312 314 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 123)
            (pc))) 55 {bleu+1} (insn_list 312 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 314 313 315 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 9 %o1)
            (reg/v:SI 24 %i0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 315 314 107 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 123)
            (pc))) 55 {bleu+1} (insn_list 314 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 107 315 117 "" NOTE_INSN_LOOP_BEG)

(code_label 117 107 115 37 "")

(insn 115 117 116 (set (reg/v:SI 9 %o1)
        (mem/s:SI (reg/v:SI 9 %o1))) 66 {movsi+1} (nil)
    (nil))

(note 116 115 318 "" NOTE_INSN_LOOP_CONT)

(note 318 116 109 "" NOTE_INSN_LOOP_VTOP)

(insn 109 318 110 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 115 (nil))
    (nil))

(jump_insn 110 109 111 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 123)
            (pc))) 55 {bleu+1} (insn_list 109 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 111 110 112 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 9 %o1)
            (reg/v:SI 24 %i0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 112 111 122 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 117)
            (pc))) 55 {bleu+1} (insn_list 111 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 122 112 123 "" NOTE_INSN_LOOP_END)

(code_label 123 122 125 36 "")

(insn 125 123 126 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 9 %o1)
        (nil)))

(jump_insn 126 125 129 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 133)
            (pc))) 55 {bleu+1} (insn_list 125 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 129 126 131 (set (reg/i:SI 24 %i0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(jump_insn 131 129 132 (set (pc)
        (label_ref 320)) 205 {jump} (nil)
    (nil))

(barrier 132 131 133)

(code_label 133 132 135 38 "")

(insn 135 133 138 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("block_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("block_stack")))
        (nil)))

(insn 138 135 140 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("block_stack"))))) 66 {movsi+1} (insn_list 135 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 140 138 145 (set (reg/v:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 138 (nil))
    (nil))

(insn 145 140 321 (set (reg/v:SI 24 %i0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 321 145 322 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (reg/v:SI 10 %o2))) 16 {sleu+1} (insn_list 145 (nil))
    (nil))

(jump_insn 322 321 146 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 168)
            (pc))) 55 {bleu+1} (insn_list 321 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 146 322 162 "" NOTE_INSN_LOOP_BEG)

(code_label 162 146 151 43 "")

(insn 151 162 152 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (reg/v:SI 9 %o1))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 152 151 155 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 159)
            (pc))) 55 {bleu+1} (insn_list 151 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 155 152 158 (set (reg/v:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(note 158 155 159 "" NOTE_INSN_LOOP_CONT)

(code_label 159 158 161 41 "")

(insn 161 159 325 (set (reg/v:SI 24 %i0)
        (mem/s:SI (reg/v:SI 24 %i0))) 66 {movsi+1} (nil)
    (nil))

(note 325 161 148 "" NOTE_INSN_LOOP_VTOP)

(insn 148 325 149 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (reg/v:SI 10 %o2))) 16 {sleu+1} (insn_list 161 (nil))
    (nil))

(jump_insn 149 148 167 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 162)
            (pc))) 55 {bleu+1} (insn_list 148 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 167 149 168 "" NOTE_INSN_LOOP_END)

(code_label 168 167 171 40 "")

(insn 171 168 173 (set (reg/v:SI 10 %o2)
        (reg/v:SI 9 %o1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 9 %o1)
        (nil)))

(note 173 171 174 "" NOTE_INSN_BLOCK_END)

(code_label 174 173 176 34 "")

(insn 176 174 179 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("block_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("block_stack")))
        (nil)))

(insn 179 176 326 (set (reg/v:SI 24 %i0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("block_stack"))))) 66 {movsi+1} (insn_list 176 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 326 179 327 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (reg/v:SI 10 %o2))) 16 {sleu+1} (insn_list 179 (nil))
    (nil))

(jump_insn 327 326 180 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 211)
            (pc))) 55 {bleu+1} (insn_list 326 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 180 327 205 "" NOTE_INSN_LOOP_BEG)

(code_label 205 180 186 49 "")

(insn 186 205 187 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 16)))
        (nil)))

(insn 187 186 188 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 186 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 188 187 190 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 211)
            (pc))) 55 {bleu+1} (insn_list 187 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 190 188 191 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 28)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 28)))
        (nil)))

(insn 191 190 192 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 190 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 192 191 201 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 211)
            (pc))) 55 {bleu+1} (insn_list 191 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 201 192 204 "" NOTE_INSN_LOOP_CONT)

(insn 204 201 330 (set (reg/v:SI 24 %i0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(note 330 204 182 "" NOTE_INSN_LOOP_VTOP)

(insn 182 330 183 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (reg/v:SI 10 %o2))) 16 {sleu+1} (insn_list 204 (nil))
    (nil))

(jump_insn 183 182 210 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 205)
            (pc))) 55 {bleu+1} (insn_list 182 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 210 183 211 "" NOTE_INSN_LOOP_END)

(code_label 211 210 213 45 "")

(insn 213 211 214 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (reg/v:SI 10 %o2))) 16 {sleu+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 10 %o2)
        (nil)))

(jump_insn 214 213 216 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 298)
            (pc))) 55 {bleu+1} (insn_list 213 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 216 214 219 "" NOTE_INSN_BLOCK_BEG)

(insn 219 216 220 (set (reg:SI 8 %o0)
        (const_int 24)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 24)
        (nil)))

(insn 220 219 222 (use (reg:SI 8 %o0)) -1 (insn_list 219 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 222 220 224 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("oballoc")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 224 222 227 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 222 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 227 224 229 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 229 227 230 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 26 %i2)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 230 229 232 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 235)
            (pc))) 55 {bleu+1} (insn_list 229 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 232 230 233 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 4)))
        (reg/v:SI 26 %i2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 26 %i2)
        (nil)))

(jump_insn 233 232 234 (set (pc)
        (label_ref 242)) 205 {jump} (nil)
    (nil))

(barrier 234 233 235)

(code_label 235 234 237 51 "")

(call_insn 237 235 239 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("get_last_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 239 237 241 "" NOTE_INSN_DELETED)

(insn 241 239 242 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 237 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(code_label 242 241 245 52 "")

(insn 245 242 248 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 8)))
        (reg/v:SI 17 %l1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 17 %l1)
        (nil)))

(insn 248 245 251 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))
        (reg/v:SI 25 %i1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 25 %i1)
        (nil)))

(insn 251 248 254 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 16)))
        (const_int 0)) 66 {movsi+1} (nil)
    (nil))

(insn 254 251 255 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 32)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 32)))
        (nil)))

(insn 255 254 256 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 254 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 256 255 258 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 263)
            (pc))) 55 {bleu+1} (insn_list 255 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 258 256 259 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 28)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 28)))
        (nil)))

(insn 259 258 260 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 258 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 260 259 263 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 279)
            (pc))) 55 {bleu+1} (insn_list 259 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(code_label 263 260 265 55 "")

(insn 265 263 268 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 268 265 271 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 28)))) 66 {movsi+1} (nil)
    (nil))

(insn 271 268 266 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 32)))) 66 {movsi+1} (nil)
    (nil))

(insn 266 271 269 (use (reg:SI 8 %o0)) -1 (insn_list 265 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 269 266 272 (use (reg:SI 9 %o1)) -1 (insn_list 268 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 272 269 274 (use (reg:SI 10 %o2)) -1 (insn_list 271 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 274 272 276 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("tree_cons")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 276 274 277 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 274 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 277 276 278 (set (pc)
        (label_ref 282)) 205 {jump} (nil)
    (nil))

(barrier 278 277 279)

(code_label 279 278 281 53 "")

(insn 281 279 282 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(code_label 282 281 284 54 "")

(insn 284 282 286 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 20)))
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 286 284 289 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("goto_fixup_chain")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("goto_fixup_chain")))
        (nil)))

(insn 289 286 290 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("goto_fixup_chain"))))) 66 {movsi+1} (insn_list 286 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 16 %l0))
        (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                    (symbol_ref:SI ("goto_fixup_chain"))))
            (nil))))

(insn 290 289 295 (set (mem/s:SI (reg/v:SI 16 %l0))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 289 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 295 290 297 (set (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("goto_fixup_chain"))))
        (reg/v:SI 16 %l0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 297 295 298 "" NOTE_INSN_BLOCK_END)

(code_label 298 297 301 50 "")

(note 301 298 303 "" NOTE_INSN_DELETED)

(insn 303 301 320 (parallel[ 
            (set (reg/i:SI 24 %i0)
                (ne:SI (reg/v:SI 24 %i0)
                    (const_int 0)))
            (clobber (reg:CC 0 %g0))
        ] ) 23 {sleu+8} (nil)
    (expr_list:REG_UNUSED (reg:CC 0 %g0)
        (expr_list:REG_DEAD (reg/v:SI 24 %i0)
            (nil))))

(code_label 320 303 319 56 "")

(insn 319 320 308 (use (reg/i:SI 24 %i0)) -1 (nil)
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 308 319 331 "" NOTE_INSN_BLOCK_END)

(note 331 308 0 "" NOTE_INSN_DELETED)

;; Function fixup_gotos

;; 14 regs to allocate: 99 105 95 94 85 101 73 74 88 69 68 72 71 70
;; 68 conflicts: 68 69 70 71 72 73 74 85 88 94 95 99 101 105 0 8 9 14 15 25 26 27 28
;; 68 preferences: 24
;; 69 conflicts: 68 69 70 71 72 73 74 85 88 94 95 99 101 105 0 8 9 14 15 26 27 28
;; 69 preferences: 25
;; 70 conflicts: 68 69 70 71 72 73 74 85 88 94 95 99 101 105 0 8 9 14 15 27 28
;; 70 preferences: 26
;; 71 conflicts: 68 69 70 71 72 73 74 85 88 94 95 99 101 105 0 8 9 14 15 28
;; 71 preferences: 27
;; 72 conflicts: 68 69 70 71 72 73 74 85 88 94 95 99 101 105 0 8 9 14 15
;; 72 preferences: 28
;; 73 conflicts: 68 69 70 71 72 73 74 85 88 94 95 99 101 105 0 8 9 14 15
;; 74 conflicts: 68 69 70 71 72 73 74 88 0 8 14
;; 85 conflicts: 68 69 70 71 72 73 85 88 0 8 14
;; 88 conflicts: 68 69 70 71 72 73 74 85 88 94 95 99 101 105 0 8 9 14 15
;; 94 conflicts: 68 69 70 71 72 73 88 94 0 14
;; 95 conflicts: 68 69 70 71 72 73 88 95 99 0 8 9 14 15
;; 99 conflicts: 68 69 70 71 72 73 88 95 99 0 14
;; 99 preferences: 8
;; 101 conflicts: 68 69 70 71 72 73 88 101 0 8 14
;; 101 preferences: 9
;; 105 conflicts: 68 69 70 71 72 73 88 105 0 8 9 14

;; Register dispositions:
68 in 24  69 in 25  70 in 26  71 in 27  72 in 28  73 in 17  
74 in 9  76 in 8  77 in 8  78 in 8  79 in 8  80 in 8  
81 in 8  82 in 8  83 in 9  84 in 8  85 in 9  87 in 8  
88 in 18  89 in 9  90 in 9  91 in 8  93 in 8  94 in 8  
95 in 16  97 in 8  99 in 8  101 in 9  103 in 8  105 in 10  
106 in 9  107 in 8  108 in 8  110 in 8  

;; Hard regs used:  0 8 9 10 15 16 17 18 24 25 26 27 28 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 6 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(insn 6 4 8 (set (reg/v:SI 25 %i1)
        (reg:SI 25 %i1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 25 %i1)
        (nil)))

(insn 8 6 10 (set (reg/v:SI 26 %i2)
        (reg:SI 26 %i2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 26 %i2)
        (nil)))

(insn 10 8 12 (set (reg/v:SI 27 %i3)
        (reg:SI 27 %i3)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 27 %i3)
        (nil)))

(insn 12 10 13 (set (reg/v:SI 28 %i4)
        (reg:SI 28 %i4)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 28 %i4)
        (nil)))

(note 13 12 14 "" NOTE_INSN_FUNCTION_BEG)

(note 14 13 16 "" NOTE_INSN_DELETED)

(note 16 14 19 "" NOTE_INSN_BLOCK_BEG)

(insn 19 16 20 (set (reg/v:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 20 19 23 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("goto_fixup_chain")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("goto_fixup_chain")))
        (nil)))

(insn 23 20 267 (set (reg/v:SI 17 %l1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("goto_fixup_chain"))))) 66 {movsi+1} (insn_list 20 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 267 23 268 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 17 %l1)
            (const_int 0))) 16 {sleu+1} (insn_list 23 (nil))
    (nil))

(jump_insn 268 267 287 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 261)
            (pc))) 55 {bleu+1} (insn_list 267 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 287 268 24 (set (reg:SI 18 %l2)
        (const_int 16384)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (const_int 16384)
        (nil)))

(note 24 287 255 "" NOTE_INSN_LOOP_BEG)

(code_label 255 24 29 93 "")

(note 29 255 31 "" NOTE_INSN_DELETED)

(insn 31 29 32 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 4)))
        (nil)))

(insn 32 31 33 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 33 32 35 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 46)
            (pc))) 55 {bleu+1} (insn_list 32 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 35 33 36 "" NOTE_INSN_DELETED)

(insn 36 35 37 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 37 36 40 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 250)
            (pc))) 55 {bleu+1} (insn_list 36 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 40 37 41 (set (reg:SI 8 %o0)
        (mem/s:SI (reg/v:SI 17 %l1))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 9 %o1))
        (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 17 %l1))
            (nil))))

(insn 41 40 44 (set (mem/s:SI (reg/v:SI 9 %o1))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 40 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg/v:SI 9 %o1)
            (nil))))

(jump_insn 44 41 45 (set (pc)
        (label_ref 250)) 205 {jump} (nil)
    (nil))

(barrier 45 44 46)

(code_label 46 45 49 72 "")

(insn 49 46 51 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 12)))
        (nil)))

(insn 51 49 52 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (insn_list 49 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 52 51 53 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 51 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 53 52 55 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 194)
            (pc))) 55 {bleu+1} (insn_list 52 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 55 53 57 "" NOTE_INSN_DELETED)

(insn 57 55 58 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 8)))
        (nil)))

(insn 58 57 59 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 57 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 59 58 60 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 108)
            (pc))) 55 {bleu+1} (insn_list 58 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 60 59 61 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 28 %i4)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 61 60 62 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 68)
            (pc))) 55 {bleu+1} (insn_list 60 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 62 61 63 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 63 62 64 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 68)
            (pc))) 55 {bleu+1} (insn_list 62 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 64 63 65 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 26 %i2)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 65 64 68 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 108)
            (pc))) 55 {bleu+1} (insn_list 64 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(code_label 68 65 70 77 "")

(insn 70 68 72 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 4)))
        (nil)))

(insn 72 70 74 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 27 %i3)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 27 %i3)
                (const_int 4)))
        (nil)))

(insn 74 72 75 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 70 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 75 74 76 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 72 (insn_list 74 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 76 75 78 (set (pc)
        (if_then_else (le (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 108)
            (pc))) 55 {bleu+1} (insn_list 75 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 78 76 80 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 8)))) 66 {movsi+1} (nil)
    (nil))

(insn 80 78 83 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))) 66 {movsi+1} (insn_list 78 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))
        (nil)))

(note 83 80 84 "" NOTE_INSN_DELETED)

(insn 84 83 85 (set (reg:CC 0 %g0)
        (compare:CC (and:SI (reg:SI 8 %o0)
                (reg:SI 18 %l2))
            (const_int 0))) 162 {xorsi3+5} (insn_list 80 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 85 84 87 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 108)
            (pc))) 55 {bleu+1} (insn_list 84 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 87 85 89 "" NOTE_INSN_BLOCK_BEG)

(insn 89 87 91 (set (reg:SI 8 %o0)
        (reg:SI 9 %o1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 91 89 92 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("*LC1")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC1")))
        (nil)))

(insn 92 91 90 (set (reg:SI 9 %o1)
        (lo_sum:SI (reg:SI 9 %o1)
            (symbol_ref:SI ("*LC1")))) 73 {movdi-2} (insn_list 91 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC1"))
            (nil))))

(insn 90 92 93 (use (reg:SI 8 %o0)) -1 (insn_list 89 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 93 90 95 (use (reg:SI 9 %o1)) -1 (insn_list 92 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 95 93 98 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error_with_decl")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 98 95 100 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 8)))
        (nil)))

(insn 100 98 103 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))) 66 {movsi+1} (insn_list 98 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))
        (nil)))

(insn 103 100 105 (set (reg:SI 8 %o0)
        (ior:SI (reg:SI 8 %o0)
            (reg:SI 18 %l2))) 151 {iorsi3} (insn_list 100 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 105 103 107 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 103 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 107 105 108 "" NOTE_INSN_BLOCK_END)

(code_label 108 107 111 76 "")

(insn 111 108 112 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 20)))) 66 {movsi+1} (nil)
    (nil))

(insn 112 111 113 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 111 (nil))
    (nil))

(jump_insn 113 112 115 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 160)
            (pc))) 55 {bleu+1} (insn_list 112 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 115 113 118 "" NOTE_INSN_BLOCK_BEG)

(insn 118 115 272 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 272 118 273 "" NOTE_INSN_DELETED)

(note 273 272 119 "" NOTE_INSN_DELETED)

(note 119 273 151 "" NOTE_INSN_LOOP_BEG)

(code_label 151 119 125 83 "")

(insn 125 151 128 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))
        (nil)))

(note 128 125 129 "" NOTE_INSN_DELETED)

(insn 129 128 130 (set (reg:CC 0 %g0)
        (compare:CC (and:SI (reg:SI 8 %o0)
                (reg:SI 18 %l2))
            (const_int 0))) 162 {xorsi3+5} (insn_list 125 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 130 129 132 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 148)
            (pc))) 55 {bleu+1} (insn_list 129 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 132 130 133 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 20)))) 66 {movsi+1} (nil)
    (nil))

(insn 133 132 134 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 132 (nil))
    (nil))

(jump_insn 134 133 136 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 148)
            (pc))) 55 {bleu+1} (insn_list 133 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 136 134 138 "" NOTE_INSN_DELETED)

(insn 138 136 141 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 141 138 139 (set (reg:SI 9 %o1)
        (plus:SI (reg/v:SI 17 %l1)
            (const_int 4))) 124 {addsi3} (nil)
    (nil))

(insn 139 141 142 (use (reg:SI 8 %o0)) -1 (insn_list 138 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 142 139 144 (use (reg:SI 9 %o1)) -1 (insn_list 141 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 144 142 147 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("fixup_cleanups")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 147 144 148 "" NOTE_INSN_LOOP_CONT)

(code_label 148 147 150 81 "")

(insn 150 148 276 (set (reg/v:SI 16 %l0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(note 276 150 121 "" NOTE_INSN_LOOP_VTOP)

(insn 121 276 122 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 16 %l0)
            (const_int 0))) 16 {sleu+1} (insn_list 150 (nil))
    (nil))

(jump_insn 122 121 156 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 151)
            (pc))) 55 {bleu+1} (insn_list 121 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 156 122 159 "" NOTE_INSN_LOOP_END)

(note 159 156 160 "" NOTE_INSN_BLOCK_END)

(code_label 160 159 163 78 "")

(insn 163 160 164 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 16)))) 66 {movsi+1} (nil)
    (nil))

(insn 164 163 165 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 163 (nil))
    (nil))

(jump_insn 165 164 167 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 187)
            (pc))) 55 {bleu+1} (insn_list 164 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 167 165 170 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("stack_pointer_rtx")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("stack_pointer_rtx")))
        (nil)))

(insn 170 167 173 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("stack_pointer_rtx"))))) 66 {movsi+1} (insn_list 167 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 173 170 171 (set (reg:SI 9 %o1)
        (reg:SI 9 %o1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 171 173 174 (use (reg:SI 8 %o0)) -1 (insn_list 170 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 174 171 176 (use (reg:SI 9 %o1)) -1 (insn_list 173 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 176 174 178 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_move_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 178 176 180 "" NOTE_INSN_DELETED)

(insn 180 178 183 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 176 (nil))
    (nil))

(insn 183 180 181 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(insn 181 183 184 (use (reg:SI 8 %o0)) -1 (insn_list 180 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 184 181 186 (use (reg:SI 9 %o1)) -1 (insn_list 183 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 186 184 187 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_insn_after")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(code_label 187 186 190 84 "")

(insn 190 187 192 (set (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 4)))
        (const_int 0)) 66 {movsi+1} (nil)
    (nil))

(jump_insn 192 190 193 (set (pc)
        (label_ref 250)) 205 {jump} (nil)
    (nil))

(barrier 193 192 194)

(code_label 194 193 196 75 "")

(insn 196 194 197 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 197 196 199 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 250)
            (pc))) 55 {bleu+1} (insn_list 196 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 199 197 201 "" NOTE_INSN_BLOCK_BEG)

(insn 201 199 277 (set (reg/v:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 20)))) 66 {movsi+1} (nil)
    (nil))

(insn 277 201 278 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 10 %o2)
            (const_int 0))) 16 {sleu+1} (insn_list 201 (nil))
    (nil))

(jump_insn 278 277 203 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 234)
            (pc))) 55 {bleu+1} (insn_list 277 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 203 278 228 "" NOTE_INSN_LOOP_BEG)

(code_label 228 203 209 91 "")

(insn 209 228 211 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 10 %o2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 10 %o2)
                (const_int 4)))
        (nil)))

(insn 211 209 212 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 32)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 32)))
        (nil)))

(insn 212 211 213 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 209 (insn_list 211 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 213 212 216 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 225)
            (pc))) 55 {bleu+1} (insn_list 212 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 216 213 219 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 10 %o2)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 10 %o2)
                (const_int 12)))
        (nil)))

(insn 219 216 221 (set (reg:SI 8 %o0)
        (ior:SI (reg:SI 8 %o0)
            (reg:SI 18 %l2))) 151 {iorsi3} (insn_list 216 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 10 %o2)
                (const_int 12)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 221 219 224 (set (mem/s:SI (plus:SI (reg/v:SI 10 %o2)
                (const_int 12)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 219 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 224 221 225 "" NOTE_INSN_LOOP_CONT)

(code_label 225 224 227 89 "")

(insn 227 225 281 (set (reg/v:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 10 %o2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(note 281 227 205 "" NOTE_INSN_LOOP_VTOP)

(insn 205 281 206 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 10 %o2)
            (const_int 0))) 16 {sleu+1} (insn_list 227 (nil))
    (nil))

(jump_insn 206 205 233 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 228)
            (pc))) 55 {bleu+1} (insn_list 205 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 233 206 234 "" NOTE_INSN_LOOP_END)

(code_label 234 233 236 88 "")

(insn 236 234 237 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 237 236 240 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 250)
            (pc))) 55 {bleu+1} (insn_list 236 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 240 237 243 (set (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 16)))
        (reg/v:SI 25 %i1)) 66 {movsi+1} (nil)
    (nil))

(note 243 240 249 "" NOTE_INSN_BLOCK_END)

(note 249 243 250 "" NOTE_INSN_LOOP_CONT)

(code_label 250 249 252 71 "")

(insn 252 250 254 (set (reg/v:SI 9 %o1)
        (reg/v:SI 17 %l1)) 66 {movsi+1} (nil)
    (nil))

(insn 254 252 271 (set (reg/v:SI 17 %l1)
        (mem/s:SI (reg/v:SI 17 %l1))) 66 {movsi+1} (nil)
    (nil))

(note 271 254 26 "" NOTE_INSN_LOOP_VTOP)

(insn 26 271 27 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 17 %l1)
            (const_int 0))) 16 {sleu+1} (insn_list 254 (nil))
    (nil))

(jump_insn 27 26 260 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 255)
            (pc))) 55 {bleu+1} (insn_list 26 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 260 27 261 "" NOTE_INSN_LOOP_END)

(code_label 261 260 263 70 "")

(note 263 261 288 "" NOTE_INSN_BLOCK_END)

(note 288 263 0 "" NOTE_INSN_DELETED)

;; Function expand_asm

;; Register dispositions:


;; Hard regs used:  8 9 10 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(note 4 2 5 "" NOTE_INSN_DELETED)

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 10 "" NOTE_INSN_DELETED)

(insn 10 8 13 (set (reg:SI 8 %o0)
        (const_int 21)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 21)
        (nil)))

(insn 13 10 16 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 16 13 11 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg:SI 24 %i0)
                (const_int 24)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(insn 11 16 14 (use (reg:SI 8 %o0)) -1 (insn_list 10 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 14 11 17 (use (reg:SI 9 %o1)) -1 (insn_list 13 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 17 14 19 (use (reg:SI 10 %o2)) -1 (insn_list 16 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 19 17 21 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 21 19 23 "" NOTE_INSN_DELETED)

(insn 23 21 24 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 19 (nil))
    (nil))

(insn 24 23 26 (use (reg:SI 8 %o0)) -1 (insn_list 23 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 26 24 28 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 28 26 31 "" NOTE_INSN_DELETED)

(insn 31 28 36 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(note 36 31 0 "" NOTE_INSN_DELETED)

;; Function expand_asm_operands

;; 35 regs to allocate: 161 234 107 157 148 101 121 208 81 102 149 82 235 100 77 79 83 237 227 78 174 133 76 75 69 80 207 73 68 151 70 104 74 72 71
;; 68 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 227 0 8 9 10 11 12 13 14 15 16 17 25 26 27 28 29
;; 68 preferences: 24
;; 69 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 0 8 9 10 11 12 13 14 15 16 17 26 27 28 29
;; 69 preferences: 25
;; 70 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 0 8 9 10 11 12 13 14 15 16 17 27 28 29
;; 70 preferences: 26
;; 71 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 227 0 8 9 10 11 12 13 14 15 16 17 28 29
;; 71 preferences: 27
;; 72 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 0 8 9 10 11 12 13 14 15 16 17 29
;; 72 preferences: 28
;; 73 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 227 0 8 9 10 11 12 13 14 15 16 17
;; 73 preferences: 29
;; 74 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 227 0 8 9 10 11 12 13 14 15 16 17
;; 75 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 148 149 151 157 161 174 207 208 227 0 8 9 10 11 12 13 14 15 16
;; 76 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 148 149 151 157 161 174 207 208 227 0 8 9 10 11 12 13 14 15 16
;; 77 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 148 149 151 157 161 174 207 227 234 235 237 0 8 9 10 11 12 13 14 15 16
;; 78 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 0 8 9 10 11 12 13 14 15 16 17
;; 79 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 0 8 9 10 11 12 13 14 15 16 17
;; 80 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 0 8 9 10 11 12 13 14 15 16 17
;; 81 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 227 234 235 237 0 8 9 10 11 12 13 14 15 16 17
;; 82 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 227 234 235 237 0 8 9 10 11 12 13 14 15 16 17
;; 83 conflicts: 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 100 101 102 104 107 121 133 148 149 151 157 161 174 207 208 227 0 8 9 10 11 12 13 14 15 16 17
;; 100 conflicts: 68 69 70 71 72 73 74 78 79 80 81 82 83 100 101 102 104 107 121 133 0 8 9 10 11 14 15 16 17
;; 101 conflicts: 68 69 70 71 72 73 74 78 79 80 81 82 83 100 101 102 104 107 133 0 8 14
;; 102 conflicts: 68 69 70 71 72 73 74 78 79 80 81 82 83 100 101 102 104 107 133 0 8 14
;; 104 conflicts: 68 69 70 71 72 73 74 78 79 80 81 82 83 100 101 102 104 107 121 133 0 8 9 10 11 14 15 16 17
;; 107 conflicts: 68 69 70 71 72 73 74 78 79 80 81 82 83 100 101 102 104 107 133 0 8 14
;; 121 conflicts: 68 69 70 71 72 73 74 78 79 80 81 82 83 100 104 121 133 0 8 14
;; 133 conflicts: 68 69 70 71 72 73 74 78 79 80 81 82 83 100 101 102 104 107 121 133 0 8 9 10 11 14 15 16 17
;; 148 conflicts: 68 69 71 72 73 74 75 76 77 78 79 80 81 82 83 148 151 157 161 174 0 8 9 14
;; 149 conflicts: 68 69 71 72 73 74 75 76 77 78 79 80 81 82 83 149 151 174 0 8 9 14
;; 151 conflicts: 68 69 71 72 73 74 75 76 77 78 79 80 81 82 83 148 149 151 157 161 174 0 8 9 10 11 14 15 16
;; 157 conflicts: 68 69 71 72 73 74 75 76 77 78 79 80 81 82 83 148 151 157 174 0 8 14
;; 161 conflicts: 68 69 71 72 73 74 75 76 77 78 79 80 81 82 83 148 151 161 174 0 14
;; 174 conflicts: 68 69 71 72 73 74 75 76 77 78 79 80 81 82 83 148 149 151 157 161 174 0 8 9 10 11 14 15 16
;; 207 conflicts: 68 69 71 72 73 74 75 76 77 79 80 81 82 83 207 208 227 0 8 9 10 11 12 13 14 15 16
;; 208 conflicts: 68 69 71 72 73 74 75 76 80 83 207 208 0 14
;; 208 preferences: 8
;; 227 conflicts: 68 71 73 74 75 76 77 81 82 83 207 227 0 8 9 10 11 12 13 14 15 16
;; 234 conflicts: 77 81 82 234 235 237 0 8 9 14 15
;; 235 conflicts: 77 81 82 234 235 237 0 8 9 14 15
;; 237 conflicts: 77 81 82 234 235 237 0 8 9 10 14 15

;; Need 1 reg of class GENERAL_REGS (for insn 346).
;; Need 1 reg of class ALL_REGS (for insn 346).
Spilling reg 2.
;; Register dispositions:
73 in 29  74 in 28  75 in 25  76 in 24  77 in 20  78 in 23  
79 in 21  80 in 26  81 in 18  82 in 19  83 in 22  85 in 8  
89 in 8  92 in 8  100 in 20  101 in 10  102 in 11  104 in 25  
105 in 9  106 in 8  107 in 9  108 in 8  110 in 8  111 in 8  
114 in 8  115 in 8  116 in 8  117 in 8  120 in 8  121 in 9  
123 in 8  124 in 8  127 in 16  128 in 8  131 in 17  133 in 24  
137 in 8  140 in 9  141 in 8  142 in 8  143 in 11  144 in 9  
145 in 9  146 in 8  147 in 8  148 in 10  149 in 10  151 in 27  
152 in 9  153 in 8  154 in 8  156 in 8  157 in 9  158 in 8  
160 in 8  161 in 8  169 in 8  170 in 9  174 in 17  176 in 9  
178 in 16  179 in 9  180 in 8  181 in 9  184 in 10  186 in 9  
189 in 9  190 in 8  192 in 16  193 in 8  195 in 9  198 in 9  
200 in 16  204 in 8  205 in 8  207 in 23  208 in 8  210 in 10  
212 in 16  213 in 11  214 in 11  216 in 9  219 in 9  220 in 8  
223 in 8  224 in 8  225 in 9  226 in 8  227 in 17  228 in 8  
229 in 8  230 in 8  234 in 16  235 in 17  236 in 8  237 in 21  
240 in 9  242 in 8  243 in 10  245 in 9  247 in 10  248 in 9  
252 in 8  253 in 8  254 in 8  255 in 8  257 in 8  

;; Hard regs used:  0 2 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 6 (set (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -20)))
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(insn 6 4 8 (set (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -28)))
        (reg:SI 25 %i1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 25 %i1)
        (nil)))

(insn 8 6 10 (set (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -36)))
        (reg:SI 26 %i2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 26 %i2)
        (nil)))

(insn 10 8 12 (set (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -44)))
        (reg:SI 27 %i3)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 27 %i3)
        (nil)))

(insn 12 10 14 (set (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -52)))
        (reg:SI 28 %i4)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 28 %i4)
        (nil)))

(insn 14 12 16 (set (reg/v:SI 29 %i5)
        (reg:SI 29 %i5)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 29 %i5)
        (nil)))

(insn 16 14 17 (set (reg/v:SI 28 %i4)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int 92)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int 92)))
        (nil)))

(note 17 16 18 "" NOTE_INSN_FUNCTION_BEG)

(note 18 17 20 "" NOTE_INSN_DELETED)

(note 20 18 23 "" NOTE_INSN_BLOCK_BEG)

(insn 23 20 24 (set (reg:SI 8 %o0)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -36)))) 66 {movsi+1} (insn_list 8 (nil))
    (nil))

(insn 24 23 26 (use (reg:SI 8 %o0)) -1 (insn_list 23 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 26 24 28 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("list_length")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 28 26 31 (set (reg/v:SI 23 %l7)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 26 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 31 28 32 (set (reg:SI 8 %o0)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -28)))) 66 {movsi+1} (insn_list 6 (nil))
    (nil))

(insn 32 31 34 (use (reg:SI 8 %o0)) -1 (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 34 32 36 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("list_length")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 36 34 39 (set (reg/v:SI 21 %l5)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 34 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 39 36 40 (set (reg:SI 8 %o0)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -44)))) 66 {movsi+1} (insn_list 10 (nil))
    (nil))

(insn 40 39 42 (use (reg:SI 8 %o0)) -1 (insn_list 39 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 42 40 44 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("list_length")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 44 42 48 (set (reg/v:SI 26 %i2)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 42 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 48 44 49 (set (reg:SI 8 %o0)
        (ashift:SI (reg/v:SI 21 %l5)
            (const_int 2))) 200 {ashlsi3} (insn_list 36 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 21 %l5)
            (const_int 4))
        (nil)))

(note 49 48 995 "" NOTE_INSN_DELETED)

(note 995 49 50 "" NOTE_INSN_DELETED)

(note 50 995 51 "" NOTE_INSN_DELETED)

(note 51 50 53 "" NOTE_INSN_DELETED)

(note 53 51 54 "" NOTE_INSN_DELETED)

(insn 54 53 55 (set (reg:SI 8 %o0)
        (plus:SI (reg:SI 8 %o0)
            (const_int 122))) 124 {addsi3} (insn_list 48 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 55 54 58 "" NOTE_INSN_DELETED)

(insn 58 55 59 (set (reg:SI 8 %o0)
        (and:SI (reg:SI 8 %o0)
            (const_int -8))) 145 {andsi3} (insn_list 54 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 59 58 61 (set (reg:SI 14 %sp)
        (minus:SI (reg:SI 14 %sp)
            (reg:SI 8 %o0))) 128 {subsi3} (insn_list 58 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 61 59 63 "" NOTE_INSN_DELETED)

(note 63 61 64 "" NOTE_INSN_DELETED)

(note 64 63 65 "" NOTE_INSN_DELETED)

(note 65 64 68 "" NOTE_INSN_DELETED)

(insn 68 65 72 (set (reg/v:SI 22 %l6)
        (plus:SI (reg:SI 14 %sp)
            (const_int 112))) 124 {addsi3} (nil)
    (nil))

(note 72 68 75 "" NOTE_INSN_DELETED)

(insn 75 72 78 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(insn 78 75 80 (set (reg/v:SI 19 %l3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 80 78 996 (set (reg/v:SI 18 %l2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -28)))) 66 {movsi+1} (nil)
    (nil))

(insn 996 80 997 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 80 (nil))
    (nil))

(jump_insn 997 996 1072 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 295)
            (pc))) 55 {bleu+1} (insn_list 996 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 1072 997 1074 (set (reg:SI 25 %i1)
        (high:SI (symbol_ref:SI ("error_mark_node")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("error_mark_node")))
        (nil)))

(insn 1074 1072 81 (set (reg:SI 24 %i0)
        (high:SI (symbol_ref:SI ("save_expr_regs")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("save_expr_regs")))
        (nil)))

(note 81 1074 289 "" NOTE_INSN_LOOP_BEG)

(code_label 289 81 86 118 "")

(note 86 289 88 "" NOTE_INSN_BLOCK_BEG)

(insn 88 86 93 (set (reg/v:SI 20 %l4)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (nil))

(insn 93 88 95 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 8)))) 66 {movsi+1} (insn_list 88 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 8)))
        (nil)))

(insn 95 93 96 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 25 %i1)
                (symbol_ref:SI ("error_mark_node"))))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 25 %i1)
                (symbol_ref:SI ("error_mark_node"))))
        (nil)))

(insn 96 95 97 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 93 (insn_list 95 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 97 96 104 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 994)
            (pc))) 55 {bleu+1} (insn_list 96 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 104 97 107 (set (reg/v:SI 11 %o3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 107 104 1001 (set (reg/v:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 1001 107 1047 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))
        (nil)))

(insn 1047 1001 1002 (set (reg/s:SI 9 %o1)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 1001 (nil))
    (nil))

(insn 1002 1047 1003 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 1003 1002 1004 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 11 %o3)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 104 (insn_list 1002 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 1004 1003 108 (set (pc)
        (if_then_else (ge (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 167)
            (pc))) 55 {bleu+1} (insn_list 1003 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 108 1004 161 "" NOTE_INSN_LOOP_BEG)

(code_label 161 108 117 115 "")

(note 117 161 119 "" NOTE_INSN_DELETED)

(note 119 117 121 "" NOTE_INSN_DELETED)

(insn 121 119 123 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/s:SI 9 %o1)
                (const_int 24)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/s:SI 9 %o1)
        (nil)))

(note 123 121 124 "" NOTE_INSN_DELETED)

(note 124 123 125 "" NOTE_INSN_DELETED)

(insn 125 124 126 (set (reg:SI 8 %o0)
        (sign_extend:SI (mem/s:QI (plus:SI (reg:SI 8 %o0)
                    (reg/v:SI 10 %o2))))) 109 {extendqisi2+1} (insn_list 121 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 126 125 127 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 43))) 16 {sleu+1} (insn_list 125 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 127 126 129 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 1051)
            (pc))) 55 {bleu+1} (insn_list 126 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 129 127 139 "" NOTE_INSN_BLOCK_BEG)

(note 139 129 143 "" NOTE_INSN_BLOCK_END)

(insn 143 139 145 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))
        (nil)))

(insn 145 143 147 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 24)))) 66 {movsi+1} (insn_list 143 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 147 145 148 "" NOTE_INSN_DELETED)

(note 148 147 149 "" NOTE_INSN_DELETED)

(insn 149 148 150 (set (reg:SI 8 %o0)
        (sign_extend:SI (mem/s:QI (plus:SI (reg:SI 8 %o0)
                    (reg/v:SI 10 %o2))))) 109 {extendqisi2+1} (insn_list 145 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 150 149 151 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 61))) 16 {sleu+1} (insn_list 149 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 151 150 154 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 159)
            (pc))) 55 {bleu+1} (insn_list 150 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 154 151 158 (set (reg/v:SI 11 %o3)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(note 158 154 159 "" NOTE_INSN_LOOP_CONT)

(code_label 159 158 160 112 "")

(insn 160 159 1007 (set (reg/v:SI 10 %o2)
        (plus:SI (reg/v:SI 10 %o2)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1007 160 111 "" NOTE_INSN_LOOP_VTOP)

(insn 111 1007 113 (set (reg/s:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (nil))

(insn 113 111 114 (set (reg/s:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/s:SI 9 %o1)
                (const_int 20)))) 66 {movsi+1} (insn_list 111 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/s:SI 9 %o1)
                (const_int 20)))
        (nil)))

(insn 114 113 115 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 10 %o2)
            (reg/s:SI 8 %o0))) 16 {sleu+1} (insn_list 160 (insn_list 113 (nil)))
    (expr_list:REG_DEAD (reg/s:SI 8 %o0)
        (nil)))

(jump_insn 115 114 166 (set (pc)
        (if_then_else (lt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 161)
            (pc))) 55 {bleu+1} (insn_list 114 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 166 115 167 "" NOTE_INSN_LOOP_END)

(code_label 167 166 169 111 "")

(insn 169 167 170 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 11 %o3)
            (const_int 0))) 16 {sleu+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 11 %o3)
        (nil)))

(jump_insn 170 169 172 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 1052)
            (pc))) 55 {bleu+1} (insn_list 169 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 172 170 182 "" NOTE_INSN_BLOCK_BEG)

(note 182 172 186 "" NOTE_INSN_BLOCK_END)

(insn 186 182 187 (set (reg:QI 9 %o1)
        (mem/s:QI (plus:SI (reg/v:SI 20 %l4)
                (const_int 12)))) 58 {movqi+1} (nil)
    (nil))

(note 187 186 189 "" NOTE_INSN_DELETED)

(insn 189 187 190 (set (subreg:SI (reg:QI 8 %o0) 0)
        (plus:SI (subreg:SI (reg:QI 9 %o1) 0)
            (const_int -43))) 124 {addsi3} (insn_list 186 (nil))
    (nil))

(insn 190 189 191 (set (reg:SI 8 %o0)
        (zero_extend:SI (reg:QI 8 %o0))) 99 {zero_extendqisi2+1} (insn_list 189 (nil))
    (expr_list:REG_DEAD (reg:QI 8 %o0)
        (nil)))

(insn 191 190 192 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 1))) 16 {sleu+1} (insn_list 190 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 192 191 195 (set (pc)
        (if_then_else (leu (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 258)
            (pc))) 55 {bleu+1} (insn_list 191 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 195 192 196 "" NOTE_INSN_DELETED)

(insn 196 195 197 (set (reg:CC 0 %g0)
        (compare:CC (subreg:SI (reg:QI 9 %o1) 0)
            (const_int 49))) 16 {sleu+1} (nil)
    (expr_list:REG_DEAD (reg:QI 9 %o1)
        (nil)))

(jump_insn 197 196 199 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 258)
            (pc))) 55 {bleu+1} (insn_list 196 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 199 197 201 "" NOTE_INSN_BLOCK_BEG)

(insn 201 199 203 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 8)))
        (nil)))

(note 203 201 204 "" NOTE_INSN_DELETED)

(note 204 203 206 "" NOTE_INSN_DELETED)

(insn 206 204 207 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:QI (plus:SI (reg:SI 8 %o0)
                    (const_int 28))))) 99 {zero_extendqisi2+1} (insn_list 201 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 207 206 209 (use (reg:SI 8 %o0)) -1 (insn_list 206 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 209 207 211 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_reg_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 211 209 214 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 209 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 214 211 217 (set (reg:SI 8 %o0)
        (const_int 112)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 112)
        (nil)))

(insn 217 214 220 (set (reg:SI 9 %o1)
        (reg/v:SI 20 %l4)) 66 {movsi+1} (nil)
    (nil))

(insn 220 217 215 (set (reg:SI 10 %o2)
        (reg/v:SI 16 %l0)) 66 {movsi+1} (insn_list 211 (nil))
    (nil))

(insn 215 220 218 (use (reg:SI 8 %o0)) -1 (insn_list 214 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 218 215 221 (use (reg:SI 9 %o1)) -1 (insn_list 217 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 221 218 223 (use (reg:SI 10 %o2)) -1 (insn_list 220 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 223 221 225 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("build_nt")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 225 223 230 (set (reg/v:SI 17 %l1)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 223 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 230 225 233 (set (reg:SI 8 %o0)
        (const_int 2)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 2)
        (nil)))

(insn 233 230 236 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 236 233 239 (set (reg:SI 10 %o2)
        (reg/v:SI 16 %l0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 239 236 231 (set (reg:SI 11 %o3)
        (mem:SI (lo_sum:SI (reg:SI 24 %i0)
                (symbol_ref:SI ("save_expr_regs"))))) 66 {movsi+1} (nil)
    (nil))

(insn 231 239 234 (use (reg:SI 8 %o0)) -1 (insn_list 230 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 234 231 237 (use (reg:SI 9 %o1)) -1 (insn_list 233 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 237 234 240 (use (reg:SI 10 %o2)) -1 (insn_list 236 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 240 237 242 (use (reg:SI 11 %o3)) -1 (insn_list 239 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(call_insn 242 240 244 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 244 242 248 "" NOTE_INSN_DELETED)

(insn 248 244 251 (set (mem:SI (lo_sum:SI (reg:SI 24 %i0)
                (symbol_ref:SI ("save_expr_regs"))))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 242 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 251 248 254 (set (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))
        (reg/v:SI 17 %l1)) 66 {movsi+1} (insn_list 225 (nil))
    (nil))

(insn 254 251 255 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 8)))
        (expr_list:REG_DEAD (reg/v:SI 20 %l4)
            (nil))))

(insn 255 254 257 (set (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 8)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 254 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg/v:SI 17 %l1)
            (nil))))

(note 257 255 258 "" NOTE_INSN_BLOCK_END)

(code_label 258 257 261 117 "")

(insn 261 258 264 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (nil))

(insn 264 261 267 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 267 264 270 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 270 267 262 (set (reg:SI 11 %o3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 262 270 265 (use (reg:SI 8 %o0)) -1 (insn_list 261 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 265 262 268 (use (reg:SI 9 %o1)) -1 (insn_list 264 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 268 265 271 (use (reg:SI 10 %o2)) -1 (insn_list 267 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 271 268 273 (use (reg:SI 11 %o3)) -1 (insn_list 270 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(call_insn 273 271 275 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("expand_expr")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 275 273 278 "" NOTE_INSN_DELETED)

(insn 278 275 280 (set (reg:SI 9 %o1)
        (ashift:SI (reg/v:SI 19 %l3)
            (const_int 2))) 200 {ashlsi3} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 19 %l3)
            (const_int 4))
        (nil)))

(insn 280 278 282 (set (mem/s:SI (plus:SI (reg/v:SI 22 %l6)
                (reg:SI 9 %o1)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 273 (insn_list 278 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 282 280 284 "" NOTE_INSN_BLOCK_END)

(note 284 282 287 "" NOTE_INSN_LOOP_CONT)

(insn 287 284 288 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(insn 288 287 1000 (set (reg/v:SI 19 %l3)
        (plus:SI (reg/v:SI 19 %l3)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1000 288 83 "" NOTE_INSN_LOOP_VTOP)

(insn 83 1000 84 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 287 (nil))
    (nil))

(jump_insn 84 83 294 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 289)
            (pc))) 55 {bleu+1} (insn_list 83 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 294 84 295 "" NOTE_INSN_LOOP_END)

(code_label 295 294 297 107 "")

(insn 297 295 298 (set (reg:SI 8 %o0)
        (plus:SI (reg/v:SI 23 %l7)
            (reg/v:SI 21 %l5))) 124 {addsi3} (nil)
    (nil))

(insn 298 297 299 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 5))) 16 {sleu+1} (insn_list 297 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 299 298 301 (set (pc)
        (if_then_else (le (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 315)
            (pc))) 55 {bleu+1} (insn_list 298 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 301 299 302 "" NOTE_INSN_BLOCK_BEG)

(insn 302 301 303 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("*LC4")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC4")))
        (nil)))

(insn 303 302 306 (set (reg:SI 8 %o0)
        (lo_sum:SI (reg:SI 8 %o0)
            (symbol_ref:SI ("*LC4")))) 73 {movdi-2} (insn_list 302 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC4"))
            (nil))))

(insn 306 303 304 (set (reg:SI 9 %o1)
        (const_int 5)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 5)
        (nil)))

(insn 304 306 307 (use (reg:SI 8 %o0)) -1 (insn_list 303 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 307 304 309 (use (reg:SI 9 %o1)) -1 (insn_list 306 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 309 307 311 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 311 309 312 (set (pc)
        (label_ref 994)) 205 {jump} (nil)
    (nil))

(barrier 312 311 314)

(note 314 312 315 "" NOTE_INSN_BLOCK_END)

(code_label 315 314 318 119 "")

(insn 318 315 319 (set (reg:SI 8 %o0)
        (reg/v:SI 23 %l7)) 66 {movsi+1} (nil)
    (nil))

(insn 319 318 321 (use (reg:SI 8 %o0)) -1 (insn_list 318 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 321 319 323 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("rtvec_alloc")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 323 321 326 (set (reg/v:SI 25 %i1)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 321 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 326 323 327 (set (reg:SI 8 %o0)
        (reg/v:SI 23 %l7)) 66 {movsi+1} (nil)
    (nil))

(insn 327 326 329 (use (reg:SI 8 %o0)) -1 (insn_list 326 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 329 327 331 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("rtvec_alloc")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 331 329 334 (set (reg/v:SI 24 %i0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 329 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 334 331 336 (set (mem:SI (plus:SI (reg:SI 14 %sp)
                (const_int 92)))
        (reg/v:SI 24 %i0)) 66 {movsi+1} (insn_list 331 (nil))
    (nil))

(insn 336 334 338 (set (mem:SI (plus:SI (reg:SI 14 %sp)
                (const_int 96)))
        (reg/v:SI 29 %i5)) 66 {movsi+1} (nil)
    (nil))

(insn 338 336 340 (set (mem:SI (plus:SI (reg:SI 14 %sp)
                (const_int 100)))
        (reg/v:SI 28 %i4)) 66 {movsi+1} (nil)
    (nil))

(insn 340 338 343 (set (reg:SI 8 %o0)
        (const_int 22)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 22)
        (nil)))

(insn 343 340 1078 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 1078 343 346 (set (reg:SI 2 %g2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -20)))) -1 (nil)
    (nil))

(insn:HI 346 1078 348 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg:SI 2 %g2)
                (const_int 24)))) 66 {movsi+1} (nil)
    (nil))

(insn 348 346 349 (set (reg:SI 11 %o3)
        (high:SI (symbol_ref:SI ("*LC5")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC5")))
        (nil)))

(insn 349 348 352 (set (reg:SI 11 %o3)
        (lo_sum:SI (reg:SI 11 %o3)
            (symbol_ref:SI ("*LC5")))) 73 {movdi-2} (insn_list 348 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC5"))
            (nil))))

(insn 352 349 355 (set (reg:SI 12 %o4)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 355 352 341 (set (reg:SI 13 %o5)
        (reg/v:SI 25 %i1)) 66 {movsi+1} (insn_list 323 (nil))
    (nil))

(insn 341 355 344 (use (reg:SI 8 %o0)) -1 (insn_list 340 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 344 341 347 (use (reg:SI 9 %o1)) -1 (insn_list 343 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 347 344 350 (use (reg:SI 10 %o2)) -1 (insn_list 346 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 350 347 353 (use (reg:SI 11 %o3)) -1 (insn_list 349 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(insn 353 350 356 (use (reg:SI 12 %o4)) -1 (insn_list 352 (nil))
    (expr_list:REG_DEAD (reg:SI 12 %o4)
        (nil)))

(insn 356 353 358 (use (reg:SI 13 %o5)) -1 (insn_list 355 (nil))
    (expr_list:REG_DEAD (reg:SI 13 %o5)
        (nil)))

(call_insn 358 356 360 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 360 358 1081 (set (reg/v:SI 20 %l4)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 358 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 1081 360 362 (set (reg:SI 2 %g2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -52)))) -1 (nil)
    (nil))

(insn:HI 362 1081 363 (set (reg:SI 9 %o1)
        (and:SI (reg:SI 2 %g2)
            (const_int 1))) 145 {andsi3} (nil)
    (nil))

(insn 363 362 365 (set (reg:SI 9 %o1)
        (ashift:SI (reg:SI 9 %o1)
            (const_int 4))) 200 {ashlsi3} (insn_list 362 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 365 363 366 (set (reg:SI 8 %o0)
        (mem/s:SI (reg/v:SI 20 %l4))) 66 {movsi+1} (insn_list 360 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 20 %l4))
        (nil)))

(insn 366 365 367 (set (reg:SI 8 %o0)
        (and:SI (reg:SI 8 %o0)
            (const_int -17))) 145 {andsi3} (insn_list 365 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 367 366 369 (set (reg:SI 8 %o0)
        (ior:SI (reg:SI 8 %o0)
            (reg:SI 9 %o1))) 151 {iorsi3} (insn_list 363 (insn_list 366 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 369 367 372 (set (mem/s:SI (reg/v:SI 20 %l4))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 367 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 372 369 375 (set (reg/v:SI 19 %l3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 375 372 1008 (set (reg/v:SI 18 %l2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -36)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -36)))
        (nil)))

(insn 1008 375 1009 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 375 (nil))
    (nil))

(jump_insn 1009 1008 1068 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 561)
            (pc))) 55 {bleu+1} (insn_list 1008 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 1068 1009 1070 (set (reg:SI 27 %i3)
        (high:SI (symbol_ref:SI ("error_mark_node")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("error_mark_node")))
        (nil)))

(insn 1070 1068 376 (set (reg:SI 17 %l1)
        (high:SI (symbol_ref:SI ("*LC7")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC7")))
        (nil)))

(note 376 1070 555 "" NOTE_INSN_LOOP_BEG)

(code_label 555 376 381 131 "")

(note 381 555 384 "" NOTE_INSN_BLOCK_BEG)

(insn 384 381 388 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (nil))

(insn 388 384 390 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 8)))) 66 {movsi+1} (insn_list 384 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 8)))
        (nil)))

(insn 390 388 391 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 27 %i3)
                (symbol_ref:SI ("error_mark_node"))))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 27 %i3)
                (symbol_ref:SI ("error_mark_node"))))
        (nil)))

(insn 391 390 392 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 388 (insn_list 390 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 392 391 399 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 994)
            (pc))) 55 {bleu+1} (insn_list 391 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 399 392 400 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))
        (nil)))

(insn 400 399 401 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 399 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 401 400 403 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 1053)
            (pc))) 55 {bleu+1} (insn_list 400 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 403 401 418 "" NOTE_INSN_BLOCK_BEG)

(note 418 403 422 "" NOTE_INSN_BLOCK_END)

(insn 422 418 1013 (set (reg/v:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 1013 422 1050 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))
        (nil)))

(insn 1050 1013 1014 (set (reg/s:SI 9 %o1)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 1013 (nil))
    (nil))

(insn 1014 1050 1015 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 1015 1014 1016 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 10 %o2)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 422 (insn_list 1014 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 1016 1015 423 (set (pc)
        (if_then_else (ge (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 489)
            (pc))) 55 {bleu+1} (insn_list 1015 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 423 1016 483 "" NOTE_INSN_LOOP_BEG)

(code_label 483 423 433 130 "")

(note 433 483 435 "" NOTE_INSN_DELETED)

(insn 435 433 437 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/s:SI 9 %o1)
                (const_int 24)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/s:SI 9 %o1)
        (nil)))

(note 437 435 438 "" NOTE_INSN_DELETED)

(note 438 437 439 "" NOTE_INSN_DELETED)

(insn 439 438 440 (set (reg:SI 8 %o0)
        (sign_extend:SI (mem/s:QI (plus:SI (reg:SI 8 %o0)
                    (reg/v:SI 10 %o2))))) 109 {extendqisi2+1} (insn_list 435 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 440 439 441 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 61))) 16 {sleu+1} (insn_list 439 (nil))
    (nil))

(jump_insn 441 440 450 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 454)
            (pc))) 55 {bleu+1} (insn_list 440 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 450 441 451 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 43))) 16 {sleu+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 451 450 454 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 481)
            (pc))) 55 {bleu+1} (insn_list 450 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(code_label 454 451 456 129 "")

(note 456 454 458 "" NOTE_INSN_BLOCK_BEG)

(insn 458 456 460 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 18 %l2)
        (nil)))

(insn 460 458 462 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 24)))) 66 {movsi+1} (insn_list 458 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 462 460 463 "" NOTE_INSN_DELETED)

(note 463 462 464 "" NOTE_INSN_DELETED)

(note 464 463 466 "" NOTE_INSN_DELETED)

(insn 466 464 469 (set (reg:SI 8 %o0)
        (lo_sum:SI (reg:SI 17 %l1)
            (symbol_ref:SI ("*LC7")))) 73 {movdi-2} (nil)
    (expr_list:REG_DEAD (reg:SI 17 %l1)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC7"))
            (nil))))

(insn 469 466 467 (set (reg:SI 9 %o1)
        (sign_extend:SI (mem/s:QI (plus:SI (reg:SI 9 %o1)
                    (reg/v:SI 10 %o2))))) 109 {extendqisi2+1} (insn_list 460 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg/v:SI 10 %o2)
            (nil))))

(insn 467 469 470 (use (reg:SI 8 %o0)) -1 (insn_list 466 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 470 467 472 (use (reg:SI 9 %o1)) -1 (insn_list 469 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 472 470 474 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 474 472 475 (set (pc)
        (label_ref/s 994)) 205 {jump} (nil)
    (nil))

(barrier 475 474 477)

(note 477 475 480 "" NOTE_INSN_BLOCK_END)

(note 480 477 481 "" NOTE_INSN_LOOP_CONT)

(code_label 481 480 482 127 "")

(insn 482 481 1019 (set (reg/v:SI 10 %o2)
        (plus:SI (reg/v:SI 10 %o2)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1019 482 426 "" NOTE_INSN_LOOP_VTOP)

(insn 426 1019 428 (set (reg/s:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (nil))

(insn 428 426 429 (set (reg/s:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/s:SI 9 %o1)
                (const_int 20)))) 66 {movsi+1} (insn_list 426 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/s:SI 9 %o1)
                (const_int 20)))
        (nil)))

(insn 429 428 430 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 10 %o2)
            (reg/s:SI 8 %o0))) 16 {sleu+1} (insn_list 482 (insn_list 428 (nil)))
    (expr_list:REG_DEAD (reg/s:SI 8 %o0)
        (nil)))

(jump_insn 430 429 488 (set (pc)
        (if_then_else (lt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 483)
            (pc))) 55 {bleu+1} (insn_list 429 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 488 430 489 "" NOTE_INSN_LOOP_END)

(code_label 489 488 492 126 "")

(insn 492 489 495 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (nil))

(insn 495 492 498 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 498 495 501 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 501 498 493 (set (reg:SI 11 %o3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 493 501 496 (use (reg:SI 8 %o0)) -1 (insn_list 492 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 496 493 499 (use (reg:SI 9 %o1)) -1 (insn_list 495 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 499 496 502 (use (reg:SI 10 %o2)) -1 (insn_list 498 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 502 499 504 (use (reg:SI 11 %o3)) -1 (insn_list 501 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(call_insn 504 502 506 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("expand_expr")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 506 504 508 "" NOTE_INSN_DELETED)

(insn 508 506 511 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 16)))
        (nil)))

(insn 511 508 512 (set (reg:SI 16 %l0)
        (ashift:SI (reg/v:SI 19 %l3)
            (const_int 2))) 200 {ashlsi3} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 19 %l3)
            (const_int 4))
        (nil)))

(insn 512 511 514 (set (reg:SI 9 %o1)
        (plus:SI (reg:SI 9 %o1)
            (reg:SI 16 %l0))) 124 {addsi3} (insn_list 508 (insn_list 511 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 514 512 517 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 504 (insn_list 512 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(insn 517 514 519 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))
        (nil)))

(insn 519 517 521 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (insn_list 517 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 521 519 522 "" NOTE_INSN_DELETED)

(note 522 521 524 "" NOTE_INSN_DELETED)

(insn 524 522 526 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))
        (nil)))

(insn 526 524 529 (set (reg:SI 8 %o0)
        (const_int 21)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 21)
        (nil)))

(insn 529 526 532 (set (reg:SI 9 %o1)
        (zero_extend:SI (mem/s:QI (plus:SI (reg:SI 9 %o1)
                    (const_int 28))))) 99 {zero_extendqisi2+1} (insn_list 519 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 532 529 527 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 24)))) 66 {movsi+1} (insn_list 524 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 527 532 530 (use (reg:SI 8 %o0)) -1 (insn_list 526 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 530 527 533 (use (reg:SI 9 %o1)) -1 (insn_list 529 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 533 530 535 (use (reg:SI 10 %o2)) -1 (insn_list 532 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 535 533 537 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 537 535 539 "" NOTE_INSN_DELETED)

(insn 539 537 543 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 20)))
        (nil)))

(insn 543 539 545 (set (reg:SI 9 %o1)
        (plus:SI (reg:SI 9 %o1)
            (reg:SI 16 %l0))) 124 {addsi3} (insn_list 539 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 16 %l0)
            (nil))))

(insn 545 543 547 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 535 (insn_list 543 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(insn 547 545 549 (set (reg/v:SI 19 %l3)
        (plus:SI (reg/v:SI 19 %l3)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 549 547 551 "" NOTE_INSN_BLOCK_END)

(note 551 549 554 "" NOTE_INSN_LOOP_CONT)

(insn 554 551 1012 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(note 1012 554 378 "" NOTE_INSN_LOOP_VTOP)

(insn 378 1012 379 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 554 (nil))
    (nil))

(jump_insn 379 378 560 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 555)
            (pc))) 55 {bleu+1} (insn_list 378 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 560 379 561 "" NOTE_INSN_LOOP_END)

(code_label 561 560 564 121 "")

(insn 564 561 1020 (set (reg/v:SI 19 %l3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 1020 564 1021 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 19 %l3)
            (reg/v:SI 23 %l7))) 16 {sleu+1} (insn_list 564 (nil))
    (nil))

(jump_insn 1021 1020 565 (set (pc)
        (if_then_else (ge (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 604)
            (pc))) 55 {bleu+1} (insn_list 1020 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 565 1021 598 "" NOTE_INSN_LOOP_BEG)

(code_label 598 565 571 135 "")

(insn 571 598 574 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 16)))
        (nil)))

(insn 574 571 575 (set (reg:SI 16 %l0)
        (ashift:SI (reg/v:SI 19 %l3)
            (const_int 2))) 200 {ashlsi3} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 19 %l3)
            (const_int 4))
        (nil)))

(insn 575 574 577 (set (reg:SI 8 %o0)
        (plus:SI (reg:SI 8 %o0)
            (reg:SI 16 %l0))) 124 {addsi3} (insn_list 571 (insn_list 574 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 577 575 580 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 575 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 580 577 578 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 578 580 581 (use (reg:SI 8 %o0)) -1 (insn_list 577 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 581 578 583 (use (reg:SI 9 %o1)) -1 (insn_list 580 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 583 581 585 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("protect_from_queue")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 585 583 587 "" NOTE_INSN_DELETED)

(insn 587 585 591 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 16)))
        (nil)))

(insn 591 587 593 (set (reg:SI 9 %o1)
        (plus:SI (reg:SI 9 %o1)
            (reg:SI 16 %l0))) 124 {addsi3} (insn_list 587 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 16 %l0)
            (nil))))

(insn 593 591 595 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 583 (insn_list 591 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 595 593 597 "" NOTE_INSN_LOOP_CONT)

(insn 597 595 1024 (set (reg/v:SI 19 %l3)
        (plus:SI (reg/v:SI 19 %l3)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1024 597 567 "" NOTE_INSN_LOOP_VTOP)

(insn 567 1024 568 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 19 %l3)
            (reg/v:SI 23 %l7))) 16 {sleu+1} (insn_list 597 (nil))
    (nil))

(jump_insn 568 567 603 (set (pc)
        (if_then_else (lt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 598)
            (pc))) 55 {bleu+1} (insn_list 567 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 603 568 604 "" NOTE_INSN_LOOP_END)

(code_label 604 603 607 133 "")

(insn 607 604 1025 (set (reg/v:SI 19 %l3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 1025 607 1026 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 19 %l3)
            (reg/v:SI 21 %l5))) 16 {sleu+1} (insn_list 607 (nil))
    (nil))

(jump_insn 1026 1025 608 (set (pc)
        (if_then_else (ge (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 641)
            (pc))) 55 {bleu+1} (insn_list 1025 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 608 1026 635 "" NOTE_INSN_LOOP_BEG)

(code_label 635 608 615 139 "")

(insn 615 635 617 (set (reg:SI 16 %l0)
        (ashift:SI (reg/v:SI 19 %l3)
            (const_int 2))) 200 {ashlsi3} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 19 %l3)
            (const_int 4))
        (nil)))

(insn 617 615 620 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 22 %l6)
                (reg:SI 16 %l0)))) 66 {movsi+1} (insn_list 615 (nil))
    (nil))

(insn 620 617 618 (set (reg:SI 9 %o1)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(insn 618 620 621 (use (reg:SI 8 %o0)) -1 (insn_list 617 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 621 618 623 (use (reg:SI 9 %o1)) -1 (insn_list 620 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 623 621 625 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("protect_from_queue")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 625 623 630 "" NOTE_INSN_DELETED)

(insn 630 625 632 (set (mem/s:SI (plus:SI (reg/v:SI 22 %l6)
                (reg:SI 16 %l0)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 623 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 16 %l0)
            (nil))))

(note 632 630 634 "" NOTE_INSN_LOOP_CONT)

(insn 634 632 1029 (set (reg/v:SI 19 %l3)
        (plus:SI (reg/v:SI 19 %l3)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1029 634 610 "" NOTE_INSN_LOOP_VTOP)

(insn 610 1029 611 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 19 %l3)
            (reg/v:SI 21 %l5))) 16 {sleu+1} (insn_list 634 (nil))
    (nil))

(jump_insn 611 610 640 (set (pc)
        (if_then_else (lt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 635)
            (pc))) 55 {bleu+1} (insn_list 610 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 640 611 641 "" NOTE_INSN_LOOP_END)

(code_label 641 640 643 137 "")

(insn 643 641 644 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 21 %l5)
            (const_int 1))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 644 643 645 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 681)
            (pc))) 55 {bleu+1} (insn_list 643 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 645 644 646 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 26 %i2)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 646 645 648 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 681)
            (pc))) 55 {bleu+1} (insn_list 645 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 648 646 1084 "" NOTE_INSN_DELETED)

(insn 1084 648 650 (set (reg:SI 2 %g2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -28)))) -1 (nil)
    (nil))

(insn:HI 650 1084 652 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 2 %g2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -28)))
        (nil)))

(insn 652 650 653 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 24)))) 66 {movsi+1} (insn_list 650 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 8)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 653 652 656 (set (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 8)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 652 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 656 653 659 (set (reg:SI 8 %o0)
        (const_int 25)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 25)
        (nil)))

(insn 659 656 662 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 662 659 665 (set (reg:SI 10 %o2)
        (mem:SI (reg/v:SI 22 %l6))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 22 %l6)
        (nil)))

(insn 665 662 657 (set (reg:SI 11 %o3)
        (reg/v:SI 20 %l4)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 20 %l4)
        (nil)))

(insn 657 665 660 (use (reg:SI 8 %o0)) -1 (insn_list 656 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 660 657 663 (use (reg:SI 9 %o1)) -1 (insn_list 659 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 663 660 666 (use (reg:SI 10 %o2)) -1 (insn_list 662 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 666 663 668 (use (reg:SI 11 %o3)) -1 (insn_list 665 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(call_insn 668 666 670 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 670 668 672 "" NOTE_INSN_DELETED)

(insn 672 670 673 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 668 (nil))
    (nil))

(insn 673 672 675 (use (reg:SI 8 %o0)) -1 (insn_list 672 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 675 673 679 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 679 675 680 (set (pc)
        (label_ref 984)) 205 {jump} (nil)
    (nil))

(barrier 680 679 681)

(code_label 681 680 683 140 "")

(insn 683 681 684 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 21 %l5)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 684 683 685 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 699)
            (pc))) 55 {bleu+1} (insn_list 683 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 685 684 686 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 26 %i2)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 686 685 688 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 699)
            (pc))) 55 {bleu+1} (insn_list 685 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 688 686 690 "" NOTE_INSN_DELETED)

(insn 690 688 691 (set (reg:SI 8 %o0)
        (reg/v:SI 20 %l4)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 20 %l4)
        (nil)))

(insn 691 690 693 (use (reg:SI 8 %o0)) -1 (insn_list 690 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 693 691 697 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 697 693 698 (set (pc)
        (label_ref 984)) 205 {jump} (nil)
    (nil))

(barrier 698 697 1051)

(code_label 1051 698 130 160 "")

(insn 130 1051 131 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("*LC2")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC2")))
        (nil)))

(insn 131 130 132 (set (reg:SI 8 %o0)
        (lo_sum:SI (reg:SI 8 %o0)
            (symbol_ref:SI ("*LC2")))) 73 {movdi-2} (insn_list 130 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC2"))
            (nil))))

(insn 132 131 134 (use (reg:SI 8 %o0)) -1 (insn_list 131 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 134 132 136 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 136 134 137 (set (pc)
        (label_ref 994)) 205 {jump} (nil)
    (nil))

(barrier 137 136 1052)

(code_label 1052 137 173 161 "")

(insn 173 1052 174 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("*LC3")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC3")))
        (nil)))

(insn 174 173 175 (set (reg:SI 8 %o0)
        (lo_sum:SI (reg:SI 8 %o0)
            (symbol_ref:SI ("*LC3")))) 73 {movdi-2} (insn_list 173 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC3"))
            (nil))))

(insn 175 174 177 (use (reg:SI 8 %o0)) -1 (insn_list 174 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 177 175 179 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 179 177 180 (set (pc)
        (label_ref 994)) 205 {jump} (nil)
    (nil))

(barrier 180 179 1053)

(code_label 1053 180 406 162 "")

(insn 406 1053 407 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("*LC6")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC6")))
        (nil)))

(insn 407 406 410 (set (reg:SI 8 %o0)
        (lo_sum:SI (reg:SI 8 %o0)
            (symbol_ref:SI ("*LC6")))) 73 {movdi-2} (insn_list 406 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC6"))
            (nil))))

(insn 410 407 408 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 24)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 408 410 411 (use (reg:SI 8 %o0)) -1 (insn_list 407 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 411 408 413 (use (reg:SI 9 %o1)) -1 (insn_list 410 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 413 411 415 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 415 413 416 (set (pc)
        (label_ref 994)) 205 {jump} (nil)
    (nil))

(barrier 416 415 1054)

(code_label 1054 416 909 163 "")

(insn 909 1054 910 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("*LC8")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC8")))
        (nil)))

(insn 910 909 913 (set (reg:SI 8 %o0)
        (lo_sum:SI (reg:SI 8 %o0)
            (symbol_ref:SI ("*LC8")))) 73 {movdi-2} (insn_list 909 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC8"))
            (nil))))

(insn 913 910 911 (set (reg:SI 9 %o1)
        (reg/v:SI 17 %l1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 17 %l1)
        (nil)))

(insn 911 913 914 (use (reg:SI 8 %o0)) -1 (insn_list 910 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 914 911 916 (use (reg:SI 9 %o1)) -1 (insn_list 913 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 916 914 918 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("error")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(jump_insn 918 916 919 (set (pc)
        (label_ref 994)) 205 {jump} (nil)
    (nil))

(barrier 919 918 699)

(code_label 699 919 701 142 "")

(note 701 699 703 "" NOTE_INSN_BLOCK_BEG)

(insn 703 701 706 (set (reg/v:SI 23 %l7)
        (reg/v:SI 20 %l4)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 20 %l4)
        (nil)))

(insn 706 703 708 (set (reg/v:SI 8 %o0)
        (reg/v:SI 21 %l5)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 21 %l5)
        (nil)))

(insn 708 706 709 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 706 (nil))
    (nil))

(jump_insn 709 708 711 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 712)
            (pc))) 55 {bleu+1} (insn_list 708 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 711 709 712 (set (reg/v:SI 8 %o0)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(code_label 712 711 714 144 "")

(note 714 712 716 "" NOTE_INSN_DELETED)

(insn 716 714 717 (set (reg:SI 8 %o0)
        (plus:SI (reg/v:SI 8 %o0)
            (reg/v:SI 26 %i2))) 124 {addsi3} (nil)
    (expr_list:REG_DEAD (reg/v:SI 26 %i2)
        (expr_list:REG_DEAD (reg/v:SI 8 %o0)
            (nil))))

(insn 717 716 719 (use (reg:SI 8 %o0)) -1 (insn_list 716 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 719 717 721 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("rtvec_alloc")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 721 719 723 (set (reg:SI 10 %o2)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 719 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 723 721 726 (set (reg:SI 8 %o0)
        (const_int 20)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 20)
        (nil)))

(insn 726 723 729 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 729 726 724 (set (reg:SI 10 %o2)
        (reg:SI 10 %o2)) 66 {movsi+1} (insn_list 721 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 724 729 727 (use (reg:SI 8 %o0)) -1 (insn_list 723 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 727 724 730 (use (reg:SI 9 %o1)) -1 (insn_list 726 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 730 727 732 (use (reg:SI 10 %o2)) -1 (insn_list 729 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 732 730 734 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 734 732 737 (set (reg/v:SI 20 %l4)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 732 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 737 734 739 (set (reg/v:SI 19 %l3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 739 737 1030 (set (reg/v:SI 18 %l2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -28)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -28)))
        (nil)))

(insn 1030 739 1031 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 739 (nil))
    (nil))

(jump_insn 1031 1030 1087 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 835)
            (pc))) 55 {bleu+1} (insn_list 1030 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 1087 1031 1063 (set (reg:SI 2 %g2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -52)))) -1 (nil)
    (nil))

(insn:HI 1063 1087 1064 (set (reg:SI 8 %o0)
        (and:SI (reg:SI 2 %g2)
            (const_int 1))) 145 {andsi3} (nil)
    (expr_list:REG_DEAD (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -52)))
        (nil)))

(insn 1064 1063 740 (set (reg:SI 17 %l1)
        (ashift:SI (reg:SI 8 %o0)
            (const_int 4))) 200 {ashlsi3} (insn_list 1063 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 740 1064 829 "" NOTE_INSN_LOOP_BEG)

(code_label 829 740 745 148 "")

(note 745 829 748 "" NOTE_INSN_DELETED)

(insn 748 745 750 (set (reg:SI 16 %l0)
        (ashift:SI (reg/v:SI 19 %l3)
            (const_int 2))) 200 {ashlsi3} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 19 %l3)
            (const_int 4))
        (nil)))

(insn 750 748 752 (set (reg:SI 11 %o3)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 16)))) 66 {movsi+1} (nil)
    (nil))

(insn 752 750 754 (set (mem:SI (plus:SI (reg:SI 14 %sp)
                (const_int 92)))
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (nil))

(insn 754 752 756 (set (mem:SI (plus:SI (reg:SI 14 %sp)
                (const_int 96)))
        (reg/v:SI 29 %i5)) 66 {movsi+1} (nil)
    (nil))

(insn 756 754 758 (set (mem:SI (plus:SI (reg:SI 14 %sp)
                (const_int 100)))
        (reg/v:SI 28 %i4)) 66 {movsi+1} (nil)
    (nil))

(insn 758 756 761 (set (reg:SI 8 %o0)
        (const_int 22)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 22)
        (nil)))

(insn 761 758 1090 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 1090 761 764 (set (reg:SI 2 %g2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -20)))) -1 (nil)
    (nil))

(insn:HI 764 1090 767 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg:SI 2 %g2)
                (const_int 24)))) 66 {movsi+1} (nil)
    (nil))

(insn 767 764 770 (set (reg:SI 11 %o3)
        (mem/s:SI (plus:SI (reg:SI 11 %o3)
                (const_int 24)))) 66 {movsi+1} (insn_list 750 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(insn 770 767 773 (set (reg:SI 12 %o4)
        (reg/v:SI 19 %l3)) 66 {movsi+1} (nil)
    (nil))

(insn 773 770 759 (set (reg:SI 13 %o5)
        (reg/v:SI 25 %i1)) 66 {movsi+1} (nil)
    (nil))

(insn 759 773 762 (use (reg:SI 8 %o0)) -1 (insn_list 758 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 762 759 765 (use (reg:SI 9 %o1)) -1 (insn_list 761 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 765 762 768 (use (reg:SI 10 %o2)) -1 (insn_list 764 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 768 765 771 (use (reg:SI 11 %o3)) -1 (insn_list 767 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(insn 771 768 774 (use (reg:SI 12 %o4)) -1 (insn_list 770 (nil))
    (expr_list:REG_DEAD (reg:SI 12 %o4)
        (nil)))

(insn 774 771 776 (use (reg:SI 13 %o5)) -1 (insn_list 773 (nil))
    (expr_list:REG_DEAD (reg:SI 13 %o5)
        (nil)))

(call_insn 776 774 778 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 778 776 780 (set (reg:SI 11 %o3)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 776 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 780 778 783 (set (reg:SI 8 %o0)
        (const_int 25)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 25)
        (nil)))

(insn 783 780 786 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 786 783 789 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 22 %l6)
                (reg:SI 16 %l0)))) 66 {movsi+1} (insn_list 748 (nil))
    (nil))

(insn 789 786 781 (set (reg:SI 11 %o3)
        (reg:SI 11 %o3)) 66 {movsi+1} (insn_list 778 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(insn 781 789 784 (use (reg:SI 8 %o0)) -1 (insn_list 780 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 784 781 787 (use (reg:SI 9 %o1)) -1 (insn_list 783 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 787 784 790 (use (reg:SI 10 %o2)) -1 (insn_list 786 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 790 787 792 (use (reg:SI 11 %o3)) -1 (insn_list 789 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(call_insn 792 790 794 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 794 792 796 "" NOTE_INSN_DELETED)

(insn 796 794 800 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))
        (nil)))

(insn 800 796 802 (set (reg:SI 9 %o1)
        (plus:SI (reg:SI 9 %o1)
            (reg:SI 16 %l0))) 124 {addsi3} (insn_list 796 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 802 800 805 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 792 (insn_list 800 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(insn 805 802 809 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))
        (nil)))

(insn 809 805 811 (set (reg:SI 8 %o0)
        (plus:SI (reg:SI 8 %o0)
            (reg:SI 16 %l0))) 124 {addsi3} (insn_list 805 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 16 %l0)
            (nil))))

(insn 811 809 813 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 809 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 813 811 817 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (insn_list 811 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 817 813 818 (set (reg:SI 8 %o0)
        (mem/s:SI (reg:SI 9 %o1))) 66 {movsi+1} (insn_list 813 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (reg:SI 9 %o1))
        (nil)))

(insn 818 817 819 (set (reg:SI 8 %o0)
        (and:SI (reg:SI 8 %o0)
            (const_int -17))) 145 {andsi3} (insn_list 817 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 819 818 821 (set (reg:SI 8 %o0)
        (ior:SI (reg:SI 8 %o0)
            (reg:SI 17 %l1))) 151 {iorsi3} (insn_list 818 (nil))
    (nil))

(insn 821 819 824 (set (mem/s:SI (reg:SI 9 %o1))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 819 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 824 821 827 "" NOTE_INSN_LOOP_CONT)

(insn 827 824 828 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(insn 828 827 1034 (set (reg/v:SI 19 %l3)
        (plus:SI (reg/v:SI 19 %l3)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1034 828 742 "" NOTE_INSN_LOOP_VTOP)

(insn 742 1034 743 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 827 (nil))
    (nil))

(jump_insn 743 742 834 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 829)
            (pc))) 55 {bleu+1} (insn_list 742 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 834 743 835 "" NOTE_INSN_LOOP_END)

(code_label 835 834 837 146 "")

(insn 837 835 838 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 19 %l3)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 838 837 841 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 849)
            (pc))) 55 {bleu+1} (insn_list 837 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 841 838 847 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))
        (nil)))

(insn 847 841 848 (set (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 4)))
        (reg/v:SI 23 %l7)) 66 {movsi+1} (insn_list 841 (nil))
    (expr_list:REG_DEAD (reg/v:SI 23 %l7)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 848 847 849 (set (reg/v:SI 19 %l3)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(code_label 849 848 852 149 "")

(insn 852 849 1035 (set (reg/v:SI 18 %l2)
        (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -44)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (mem:SI (plus:SI (reg:SI 30 %fp)
                (const_int -44)))
        (nil)))

(insn 1035 852 1036 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 852 (nil))
    (nil))

(jump_insn 1036 1035 1060 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 972)
            (pc))) 55 {bleu+1} (insn_list 1035 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 1060 1036 1061 "" NOTE_INSN_DELETED)

(insn 1061 1060 1062 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("reg_names")))) 70 {movsi+5} (nil)
    (nil))

(insn 1062 1061 853 (set (reg:SI 21 %l5)
        (lo_sum:SI (reg:SI 8 %o0)
            (symbol_ref:SI ("reg_names")))) 73 {movdi-2} (insn_list 1061 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_EQUIV (symbol_ref:SI ("reg_names"))
            (nil))))

(note 853 1062 966 "" NOTE_INSN_LOOP_BEG)

(code_label 966 853 858 159 "")

(note 858 966 861 "" NOTE_INSN_BLOCK_BEG)

(insn 861 858 863 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 20)))
        (nil)))

(insn 863 861 866 (set (reg/v:SI 17 %l1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 24)))) 66 {movsi+1} (insn_list 861 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 866 863 1040 (set (reg/v:SI 16 %l0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(note 1040 866 1041 "" NOTE_INSN_DELETED)

(note 1041 1040 1057 "" NOTE_INSN_DELETED)

(note 1057 1041 867 "" NOTE_INSN_DELETED)

(note 867 1057 897 "" NOTE_INSN_LOOP_BEG)

(code_label 897 867 876 157 "")

(insn 876 897 878 (set (reg:SI 9 %o1)
        (ashift:SI (reg/v:SI 16 %l0)
            (const_int 2))) 200 {ashlsi3} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 16 %l0)
            (const_int 4))
        (nil)))

(insn 878 876 881 (set (reg:SI 8 %o0)
        (reg/v:SI 17 %l1)) 66 {movsi+1} (nil)
    (nil))

(insn 881 878 879 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (reg:SI 21 %l5)))) 66 {movsi+1} (insn_list 876 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 879 881 882 (use (reg:SI 8 %o0)) -1 (insn_list 878 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 882 879 884 (use (reg:SI 9 %o1)) -1 (insn_list 881 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 884 882 886 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("strcmp")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 886 884 887 "" NOTE_INSN_DELETED)

(insn 887 886 888 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 884 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 888 887 894 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 903)
            (pc))) 55 {bleu+1} (insn_list 887 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 894 888 896 "" NOTE_INSN_LOOP_CONT)

(insn 896 894 1044 (set (reg/v:SI 16 %l0)
        (plus:SI (reg/v:SI 16 %l0)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1044 896 869 "" NOTE_INSN_LOOP_VTOP)

(insn 869 1044 870 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 16 %l0)
            (const_int 55))) 16 {sleu+1} (insn_list 896 (nil))
    (nil))

(jump_insn 870 869 902 (set (pc)
        (if_then_else (le (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 897)
            (pc))) 55 {bleu+1} (insn_list 869 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 902 870 903 "" NOTE_INSN_LOOP_END)

(code_label 903 902 905 154 "")

(insn 905 903 906 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 16 %l0)
            (const_int 56))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 906 905 908 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 1054)
            (pc))) 55 {bleu+1} (insn_list 905 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 908 906 921 "" NOTE_INSN_BLOCK_BEG)

(note 921 908 925 "" NOTE_INSN_BLOCK_END)

(insn 925 921 928 (set (reg:SI 8 %o0)
        (const_int 34)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 34)
        (nil)))

(insn 928 925 931 (set (reg:SI 9 %o1)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(insn 931 928 926 (set (reg:SI 10 %o2)
        (reg/v:SI 16 %l0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 926 931 929 (use (reg:SI 8 %o0)) -1 (insn_list 925 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 929 926 932 (use (reg:SI 9 %o1)) -1 (insn_list 928 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 932 929 934 (use (reg:SI 10 %o2)) -1 (insn_list 931 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 934 932 936 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 936 934 938 (set (reg:SI 10 %o2)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 934 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 938 936 941 (set (reg:SI 8 %o0)
        (const_int 27)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 27)
        (nil)))

(insn 941 938 944 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 944 941 939 (set (reg:SI 10 %o2)
        (reg:SI 10 %o2)) 66 {movsi+1} (insn_list 936 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 939 944 942 (use (reg:SI 8 %o0)) -1 (insn_list 938 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 942 939 945 (use (reg:SI 9 %o1)) -1 (insn_list 941 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 945 942 947 (use (reg:SI 10 %o2)) -1 (insn_list 944 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 947 945 949 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 949 947 951 "" NOTE_INSN_DELETED)

(insn 951 949 954 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 20 %l4)
                (const_int 4)))
        (nil)))

(insn 954 951 955 (set (reg:SI 10 %o2)
        (ashift:SI (reg/v:SI 19 %l3)
            (const_int 2))) 200 {ashlsi3} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 19 %l3)
            (const_int 4))
        (nil)))

(insn 955 954 957 (set (reg:SI 9 %o1)
        (plus:SI (reg:SI 9 %o1)
            (reg:SI 10 %o2))) 124 {addsi3} (insn_list 951 (insn_list 954 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 10 %o2)
            (nil))))

(insn 957 955 959 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 947 (insn_list 955 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 959 957 961 "" NOTE_INSN_BLOCK_END)

(note 961 959 964 "" NOTE_INSN_LOOP_CONT)

(insn 964 961 965 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (nil))

(insn 965 964 1039 (set (reg/v:SI 19 %l3)
        (plus:SI (reg/v:SI 19 %l3)
            (const_int 1))) 124 {addsi3} (nil)
    (nil))

(note 1039 965 855 "" NOTE_INSN_LOOP_VTOP)

(insn 855 1039 856 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 18 %l2)
            (const_int 0))) 16 {sleu+1} (insn_list 964 (nil))
    (nil))

(jump_insn 856 855 971 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 966)
            (pc))) 55 {bleu+1} (insn_list 855 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 971 856 972 "" NOTE_INSN_LOOP_END)

(code_label 972 971 975 151 "")

(insn 975 972 976 (set (reg:SI 8 %o0)
        (reg/v:SI 20 %l4)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 20 %l4)
        (nil)))

(insn 976 975 978 (use (reg:SI 8 %o0)) -1 (insn_list 975 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 978 976 982 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 982 978 984 "" NOTE_INSN_BLOCK_END)

(code_label 984 982 986 141 "")

(note 986 984 989 "" NOTE_INSN_DELETED)

(insn 989 986 991 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(note 991 989 994 "" NOTE_INSN_BLOCK_END)

(code_label 994 991 1075 105 "")

(note 1075 994 0 "" NOTE_INSN_DELETED)

;; Function expand_expr_stmt

;; 2 regs to allocate: 92 68
;; 68 conflicts: 68 92 0 8 9 10 14 15
;; 68 preferences: 24
;; 92 conflicts: 68 92 8 14
;; 92 preferences: 9

;; Register dispositions:
68 in 24  70 in 8  71 in 8  73 in 8  74 in 8  76 in 9  
77 in 8  79 in 8  80 in 8  82 in 8  84 in 9  85 in 10  
88 in 8  90 in 8  91 in 8  92 in 9  94 in 8  95 in 8  
97 in 8  

;; Hard regs used:  0 8 9 10 11 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 9 "" NOTE_INSN_BLOCK_BEG)

(insn 9 8 12 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("extra_warnings")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("extra_warnings")))
        (nil)))

(insn 12 9 13 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("extra_warnings"))))) 66 {movsi+1} (insn_list 9 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 13 12 14 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 12 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 14 13 15 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 50)
            (pc))) 55 {bleu+1} (insn_list 13 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 15 14 18 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("expr_stmts_for_value")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("expr_stmts_for_value")))
        (nil)))

(insn 18 15 19 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("expr_stmts_for_value"))))) 66 {movsi+1} (insn_list 15 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 19 18 20 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 18 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 20 19 22 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 50)
            (pc))) 55 {bleu+1} (insn_list 19 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 22 20 24 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (nil)))

(insn 24 22 25 (set (reg:SI 8 %o0)
        (const_int 1048576)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (const_int 1048576)
        (nil)))

(note 25 24 26 "" NOTE_INSN_DELETED)

(insn 26 25 27 (set (reg:CC 0 %g0)
        (compare:CC (and:SI (reg:SI 9 %o1)
                (reg:SI 8 %o0))
            (const_int 0))) 162 {xorsi3+5} (insn_list 24 (insn_list 22 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(jump_insn 27 26 28 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 50)
            (pc))) 55 {bleu+1} (insn_list 26 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 28 27 31 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("error_mark_node")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("error_mark_node")))
        (nil)))

(insn 31 28 32 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("error_mark_node"))))) 66 {movsi+1} (insn_list 28 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 32 31 33 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 33 32 35 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 50)
            (pc))) 55 {bleu+1} (insn_list 32 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 35 33 37 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("emit_filename")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("emit_filename")))
        (nil)))

(insn 37 35 40 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("emit_lineno")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("emit_lineno")))
        (nil)))

(insn 40 37 43 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("emit_filename"))))) 66 {movsi+1} (insn_list 35 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 43 40 45 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("emit_lineno"))))) 66 {movsi+1} (insn_list 37 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 45 43 46 (set (reg:SI 10 %o2)
        (high:SI (symbol_ref:SI ("*LC9")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("*LC9")))
        (nil)))

(insn 46 45 41 (set (reg:SI 10 %o2)
        (lo_sum:SI (reg:SI 10 %o2)
            (symbol_ref:SI ("*LC9")))) 73 {movdi-2} (insn_list 45 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*LC9"))
            (nil))))

(insn 41 46 44 (use (reg:SI 8 %o0)) -1 (insn_list 40 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 44 41 47 (use (reg:SI 9 %o1)) -1 (insn_list 43 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 47 44 49 (use (reg:SI 10 %o2)) -1 (insn_list 46 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 49 47 50 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("warning_with_file_and_line")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(code_label 50 49 52 178 "")

(note 52 50 55 "" NOTE_INSN_DELETED)

(insn 55 52 56 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (symbol_ref:SI ("last_expr_type")))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                    (const_int 8)))
            (nil))))

(insn 56 55 58 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (reg:SI 8 %o0))
            (clobber (reg:SI 9 %o1))
        ] ) 74 {movdi-1} (insn_list 55 (nil))
    (expr_list:REG_UNUSED (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 58 56 61 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("flag_syntax_only")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("flag_syntax_only")))
        (nil)))

(insn 61 58 62 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("flag_syntax_only"))))) 66 {movsi+1} (insn_list 58 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 62 61 63 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 61 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 63 62 65 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 101)
            (pc))) 55 {bleu+1} (insn_list 62 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 65 63 68 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("expr_stmts_for_value")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("expr_stmts_for_value")))
        (nil)))

(insn 68 65 69 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("expr_stmts_for_value"))))) 66 {movsi+1} (insn_list 65 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 69 68 70 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 68 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 70 69 71 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 77)
            (pc))) 55 {bleu+1} (insn_list 69 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 71 70 74 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("const0_rtx")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("const0_rtx")))
        (nil)))

(insn 74 71 75 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("const0_rtx"))))) 66 {movsi+1} (insn_list 71 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 75 74 76 (set (pc)
        (label_ref 80)) 205 {jump} (nil)
    (nil))

(barrier 76 75 77)

(code_label 77 76 79 180 "")

(insn 79 77 80 (set (reg:SI 9 %o1)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(code_label 80 79 82 181 "")

(insn 82 80 85 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 85 82 88 (set (reg:SI 9 %o1)
        (reg:SI 9 %o1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 88 85 91 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 91 88 83 (set (reg:SI 11 %o3)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 83 91 86 (use (reg:SI 8 %o0)) -1 (insn_list 82 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 86 83 89 (use (reg:SI 9 %o1)) -1 (insn_list 85 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 89 86 92 (use (reg:SI 10 %o2)) -1 (insn_list 88 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 92 89 94 (use (reg:SI 11 %o3)) -1 (insn_list 91 (nil))
    (expr_list:REG_DEAD (reg:SI 11 %o3)
        (nil)))

(call_insn 94 92 96 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("expand_expr")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 96 94 97 "" NOTE_INSN_DELETED)

(note 97 96 100 "" NOTE_INSN_DELETED)

(insn 100 97 101 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_value")))
                (reg:SI 8 %o0))
            (clobber (reg:SI 9 %o1))
        ] ) 74 {movdi-1} (insn_list 94 (nil))
    (expr_list:REG_UNUSED (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(code_label 101 100 104 179 "")

(call_insn 104 101 106 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("emit_queue")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 106 104 110 "" NOTE_INSN_BLOCK_END)

(note 110 106 0 "" NOTE_INSN_DELETED)

;; Function clear_last_expr

;; Register dispositions:


;; Hard regs used:  2 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 7 "" NOTE_INSN_DELETED)

(note 7 6 10 "" NOTE_INSN_DELETED)

(insn 10 7 15 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 2 %g2))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 2 %g2)
        (nil)))

(note 15 10 0 "" NOTE_INSN_DELETED)

;; Function expand_start_stmt_expr

;; Register dispositions:
68 in 17  69 in 16  70 in 24  72 in 9  77 in 8  78 in 8  


;; Hard regs used:  8 9 15 16 17 24 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 8 "" NOTE_INSN_BLOCK_BEG)

(call_insn 8 6 10 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("start_sequence")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 10 8 13 (set (reg/v:SI 17 %l1)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 8 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 13 10 15 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("suspend_momentary")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 15 13 18 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 13 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 18 15 19 (set (reg:SI 8 %o0)
        (const_int 113)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 113)
        (nil)))

(insn 19 18 21 (use (reg:SI 8 %o0)) -1 (insn_list 18 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 21 19 23 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("make_node")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 23 21 26 (set (reg/v:SI 24 %i0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 21 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 26 23 27 (set (reg:SI 8 %o0)
        (reg/v:SI 16 %l0)) 66 {movsi+1} (insn_list 15 (nil))
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 27 26 29 (use (reg:SI 8 %o0)) -1 (insn_list 26 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 29 27 32 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("resume_momentary")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 32 29 34 (set (mem:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 24)))
        (reg/v:SI 17 %l1)) 66 {movsi+1} (insn_list 10 (insn_list 23 (nil)))
    (expr_list:REG_DEAD (reg/v:SI 17 %l1)
        (nil)))

(insn 34 32 41 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("expr_stmts_for_value")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("expr_stmts_for_value")))
        (nil)))

(insn 41 34 42 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))) 66 {movsi+1} (insn_list 34 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))
        (nil)))

(insn 42 41 46 (set (reg:SI 8 %o0)
        (plus:SI (reg:SI 8 %o0)
            (const_int 1))) 124 {addsi3} (insn_list 41 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 46 42 49 (set (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 42 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(insn 49 46 50 (set (reg/i:SI 24 %i0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 50 49 54 (use (reg/i:SI 24 %i0)) -1 (insn_list 49 (nil))
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 54 50 58 "" NOTE_INSN_BLOCK_END)

(note 58 54 0 "" NOTE_INSN_DELETED)

;; Function expand_end_stmt_expr

;; 3 regs to allocate: 68 71 69
;; 68 conflicts: 68 69 71 0 8 9 10 14 15 16 17 18
;; 68 preferences: 24
;; 69 conflicts: 68 69 71 0 8 9 10 14 15 16 17 18
;; 71 conflicts: 68 69 71 0 8 14

;; Register dispositions:
68 in 24  69 in 19  71 in 9  72 in 8  76 in 8  77 in 8  
81 in 8  82 in 8  84 in 18  85 in 8  87 in 17  88 in 8  
91 in 16  95 in 8  96 in 9  97 in 8  101 in 8  102 in 8  
103 in 10  104 in 9  106 in 9  110 in 9  115 in 8  116 in 8  


;; Hard regs used:  0 8 9 10 15 16 17 18 19 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 10 "" NOTE_INSN_BLOCK_BEG)

(insn 10 8 13 (set (reg/v:SI 19 %l3)
        (mem:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 24)))) 66 {movsi+1} (insn_list 4 (nil))
    (nil))

(call_insn 13 10 15 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 15 13 18 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("last_expr_type")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("last_expr_type")))
        (nil)))

(insn 18 15 19 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("last_expr_type"))))) 66 {movsi+1} (insn_list 15 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("last_expr_type"))))
        (nil)))

(insn 19 18 20 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 18 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 20 19 22 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 39)
            (pc))) 55 {bleu+1} (insn_list 19 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 22 20 25 "" NOTE_INSN_DELETED)

(insn 25 22 28 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("void_type_node")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("void_type_node")))
        (nil)))

(insn 28 25 29 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("void_type_node"))))) 66 {movsi+1} (insn_list 25 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("last_expr_type"))))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 29 28 31 (set (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("last_expr_type"))))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 28 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 31 29 33 "" NOTE_INSN_DELETED)

(insn 33 31 36 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("const0_rtx")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("const0_rtx")))
        (nil)))

(insn 36 33 37 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("const0_rtx"))))) 66 {movsi+1} (insn_list 33 (nil))
    (expr_list:REG_EQUIV (mem:SI (symbol_ref:SI ("last_expr_value")))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 37 36 39 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_value")))
                (reg:SI 8 %o0))
            (clobber (reg:SI 9 %o1))
        ] ) 74 {movdi-1} (insn_list 36 (nil))
    (expr_list:REG_UNUSED (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(code_label 39 37 41 186 "")

(insn 41 39 44 (set (reg:SI 18 %l2)
        (high:SI (symbol_ref:SI ("last_expr_type")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("last_expr_type")))
        (nil)))

(insn 44 41 45 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 18 %l2)
                (symbol_ref:SI ("last_expr_type"))))) 66 {movsi+1} (insn_list 41 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 8)))
        (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 18 %l2)
                    (symbol_ref:SI ("last_expr_type"))))
            (nil))))

(insn 45 44 47 (set (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 8)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 44 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 47 45 50 (set (reg:SI 17 %l1)
        (high:SI (symbol_ref:SI ("last_expr_value")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("last_expr_value")))
        (nil)))

(insn 50 47 51 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("last_expr_value"))))) 66 {movsi+1} (insn_list 47 (nil))
    (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 24)))
        (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                    (symbol_ref:SI ("last_expr_value"))))
            (nil))))

(insn 51 50 54 (set (mem:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 24)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 50 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 54 51 56 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("get_insns")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 56 54 58 "" NOTE_INSN_DELETED)

(insn 58 56 60 (set (mem:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 20)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 54 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 60 58 63 (set (reg:SI 16 %l0)
        (high:SI (symbol_ref:SI ("rtl_expr_chain")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("rtl_expr_chain")))
        (nil)))

(insn 63 60 66 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 66 63 69 (set (reg:SI 9 %o1)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (nil))

(insn 69 66 64 (set (reg:SI 10 %o2)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("rtl_expr_chain"))))) 66 {movsi+1} (insn_list 60 (nil))
    (nil))

(insn 64 69 67 (use (reg:SI 8 %o0)) -1 (insn_list 63 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 67 64 70 (use (reg:SI 9 %o1)) -1 (insn_list 66 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 70 67 72 (use (reg:SI 10 %o2)) -1 (insn_list 69 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 72 70 74 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("tree_cons")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 74 72 78 "" NOTE_INSN_DELETED)

(insn 78 74 81 (set (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("rtl_expr_chain"))))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 72 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 16 %l0)
            (nil))))

(insn 81 78 82 (set (reg:SI 8 %o0)
        (reg/v:SI 19 %l3)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 19 %l3)
        (nil)))

(insn 82 81 84 (use (reg:SI 8 %o0)) -1 (insn_list 81 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 84 82 87 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("end_sequence")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 87 84 89 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (nil)))

(insn 89 87 90 (set (reg:SI 9 %o1)
        (const_int 1048576)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (const_int 1048576)
        (nil)))

(insn 90 89 92 (set (reg:SI 8 %o0)
        (ior:SI (reg:SI 8 %o0)
            (reg:SI 9 %o1))) 151 {iorsi3} (insn_list 87 (insn_list 89 (nil)))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (expr_list:REG_DEAD (reg:SI 9 %o1)
                (nil)))))

(insn 92 90 97 (set (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 90 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 97 92 98 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("last_expr_value"))))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 17 %l1)
        (nil)))

(insn 98 97 100 (use (reg:SI 8 %o0)) -1 (insn_list 97 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 100 98 102 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("volatile_refs_p")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 102 100 103 "" NOTE_INSN_DELETED)

(insn 103 102 104 (set (reg:SI 8 %o0)
        (and:SI (reg:SI 8 %o0)
            (const_int 1))) 145 {andsi3} (insn_list 100 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 104 103 106 (set (reg:SI 8 %o0)
        (ashift:SI (reg:SI 8 %o0)
            (const_int 12))) 200 {ashlsi3} (insn_list 103 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 106 104 107 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (nil)))

(note 107 106 108 "" NOTE_INSN_DELETED)

(insn 108 107 109 (set (reg:SI 9 %o1)
        (const_int 4096)) 66 {movsi+1} (nil)
    (nil))

(insn 109 108 110 (set (reg:SI 9 %o1)
        (and:SI (not:SI (reg:SI 9 %o1))
            (reg:SI 10 %o2))) 148 {iordi3-1} (insn_list 108 (insn_list 106 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 10 %o2)
            (nil))))

(insn 110 109 112 (set (reg:SI 9 %o1)
        (ior:SI (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 151 {iorsi3} (insn_list 104 (insn_list 109 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 112 110 117 (set (mem/s:SI (plus:SI (reg/v:SI 24 %i0)
                (const_int 12)))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 110 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 117 112 119 (set (mem:SI (lo_sum:SI (reg:SI 18 %l2)
                (symbol_ref:SI ("last_expr_type"))))
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 18 %l2)
        (nil)))

(insn 119 117 126 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("expr_stmts_for_value")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("expr_stmts_for_value")))
        (nil)))

(insn 126 119 127 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))) 66 {movsi+1} (insn_list 119 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))
        (nil)))

(insn 127 126 131 (set (reg:SI 8 %o0)
        (plus:SI (reg:SI 8 %o0)
            (const_int -1))) 124 {addsi3} (insn_list 126 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 131 127 134 (set (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("expr_stmts_for_value"))))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 127 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(insn 134 131 135 (set (reg/i:SI 24 %i0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 135 134 139 (use (reg/i:SI 24 %i0)) -1 (insn_list 134 (nil))
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 139 135 145 "" NOTE_INSN_BLOCK_END)

(note 145 139 0 "" NOTE_INSN_DELETED)

;; Function expand_start_cond

;; 3 regs to allocate: 70 86 68
;; 68 conflicts: 68 70 86 0 8 9 14 15 25
;; 68 preferences: 24
;; 70 conflicts: 68 70 86 0 8 9 14 15 25
;; 86 conflicts: 68 70 86 0 14 25
;; 86 preferences: 8

;; Register dispositions:
68 in 24  69 in 25  70 in 16  72 in 8  73 in 8  75 in 8  
76 in 8  78 in 9  83 in 8  84 in 8  86 in 8  

;; Hard regs used:  0 8 9 10 15 16 24 25 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 6 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(insn 6 4 7 (set (reg/v:SI 25 %i1)
        (reg:SI 25 %i1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 25 %i1)
        (nil)))

(note 7 6 8 "" NOTE_INSN_FUNCTION_BEG)

(note 8 7 10 "" NOTE_INSN_DELETED)

(note 10 8 13 "" NOTE_INSN_BLOCK_BEG)

(insn 13 10 14 (set (reg:SI 8 %o0)
        (const_int 40)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 40)
        (nil)))

(insn 14 13 16 (use (reg:SI 8 %o0)) -1 (insn_list 13 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 16 14 18 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("xmalloc")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 18 16 20 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 16 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 20 18 23 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 23 20 24 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (insn_list 20 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 4)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 24 23 26 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 18 (insn_list 23 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 26 24 29 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 29 26 30 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("nesting_stack"))))) 66 {movsi+1} (insn_list 26 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 16 %l0))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 30 29 32 (set (mem/s:SI (reg/v:SI 16 %l0))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 29 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 32 30 39 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("nesting_depth")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_depth")))
        (nil)))

(insn 39 32 40 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("nesting_depth"))))) 66 {movsi+1} (insn_list 32 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("nesting_depth"))))
        (nil)))

(insn 40 39 44 (set (reg:SI 8 %o0)
        (plus:SI (reg:SI 8 %o0)
            (const_int 1))) 124 {addsi3} (insn_list 39 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 8)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 44 40 46 (set (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("nesting_depth"))))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 40 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 46 44 49 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 8)))
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 49 46 52 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 20)))
        (const_int 0)) 66 {movsi+1} (nil)
    (nil))

(call_insn 52 49 54 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 54 52 56 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 52 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 56 54 58 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 16)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 54 (nil))
    (nil))

(insn 58 56 59 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 25 %i1)
            (const_int 0))) 16 {sleu+1} (insn_list 6 (nil))
    (expr_list:REG_DEAD (reg/v:SI 25 %i1)
        (nil)))

(jump_insn 59 58 62 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 65)
            (pc))) 55 {bleu+1} (insn_list 58 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 62 59 63 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 63 62 64 (set (pc)
        (label_ref 68)) 205 {jump} (nil)
    (nil))

(barrier 64 63 65)

(code_label 65 64 67 188 "")

(insn 67 65 68 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))
        (const_int 0)) 66 {movsi+1} (nil)
    (nil))

(code_label 68 67 70 189 "")

(note 70 68 73 "" NOTE_INSN_DELETED)

(insn 73 70 75 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("cond_stack")))
                (reg/v:SI 16 %l0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(note 75 73 78 "" NOTE_INSN_DELETED)

(insn 78 75 81 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("nesting_stack")))
                (reg/v:SI 16 %l0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(insn 81 78 84 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 84 81 87 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 87 84 82 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 82 87 85 (use (reg:SI 8 %o0)) -1 (insn_list 81 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 85 82 88 (use (reg:SI 9 %o1)) -1 (insn_list 84 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 88 85 90 (use (reg:SI 10 %o2)) -1 (insn_list 87 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 90 88 92 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("do_jump")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 92 90 96 "" NOTE_INSN_BLOCK_END)

(note 96 92 0 "" NOTE_INSN_DELETED)

;; Function expand_end_cond

;; 4 regs to allocate: 85 77 71 82
;; 71 conflicts: 71 77 82 85 0 8 9 14 15
;; 77 conflicts: 71 77 82 85 0 8 9 14 15
;; 82 conflicts: 71 77 82 85 0 8 9 14 15
;; 85 conflicts: 71 77 82 85 0 8 9 14 15

;; Register dispositions:
68 in 16  70 in 8  71 in 18  72 in 8  74 in 8  75 in 8  
77 in 17  80 in 9  82 in 19  83 in 9  85 in 16  86 in 9  
89 in 8  

;; Hard regs used:  0 8 9 15 16 17 18 19 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 7 "" NOTE_INSN_BLOCK_BEG)

(insn 7 6 10 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 10 7 13 (set (reg/v:SI 16 %l0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (insn_list 7 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 13 10 16 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 16 13 17 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 16)))) 66 {movsi+1} (insn_list 10 (nil))
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 17 16 19 (use (reg:SI 8 %o0)) -1 (insn_list 16 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 19 17 21 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 21 19 23 "" NOTE_INSN_LOOP_BEG)

(note 23 21 24 "" NOTE_INSN_BLOCK_BEG)

(insn 24 23 27 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 27 24 29 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("nesting_stack"))))) 66 {movsi+1} (insn_list 24 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 29 27 90 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (insn_list 27 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 90 29 92 (set (reg:SI 17 %l1)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 92 90 94 (set (reg:SI 19 %l3)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 94 92 30 (set (reg:SI 16 %l0)
        (high:SI (symbol_ref:SI ("nesting_depth")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_depth")))
        (nil)))

(note 30 94 31 "" NOTE_INSN_LOOP_BEG)

(code_label 31 30 32 194 "")

(note 32 31 36 "" NOTE_INSN_BLOCK_BEG)

(insn 36 32 40 (set (reg/v:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (nil)
    (nil))

(insn 40 36 41 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 36 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("cond_stack"))))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                    (const_int 4)))
            (nil))))

(insn 41 40 45 (set (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("cond_stack"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 40 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 45 41 46 (set (reg:SI 9 %o1)
        (mem/s:SI (reg/v:SI 8 %o0))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 19 %l3)
                (symbol_ref:SI ("nesting_stack"))))
        (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 8 %o0))
            (nil))))

(insn 46 45 50 (set (mem:SI (lo_sum:SI (reg:SI 19 %l3)
                (symbol_ref:SI ("nesting_stack"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 45 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 50 46 51 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                    (const_int 8)))
            (nil))))

(insn 51 50 53 (set (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 50 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 53 51 54 (set (reg:SI 8 %o0)
        (reg/v:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 8 %o0)
        (nil)))

(insn 54 53 56 (use (reg:SI 8 %o0)) -1 (insn_list 53 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 56 54 57 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("free")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 57 56 58 "" NOTE_INSN_BLOCK_END)

(note 58 57 63 "" NOTE_INSN_LOOP_CONT)

(insn 63 58 64 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (nil)))

(insn 64 63 65 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (reg/v:SI 18 %l2))) 16 {sleu+1} (insn_list 63 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 65 64 68 (set (pc)
        (if_then_else (gt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 31)
            (pc))) 55 {bleu+1} (insn_list 64 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 68 65 70 "" NOTE_INSN_LOOP_END)

(note 70 68 71 "" NOTE_INSN_BLOCK_END)

(note 71 70 77 "" NOTE_INSN_LOOP_CONT)

(note 77 71 80 "" NOTE_INSN_LOOP_END)

(note 80 77 83 "" NOTE_INSN_DELETED)

(insn 83 80 85 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(note 85 83 95 "" NOTE_INSN_BLOCK_END)

(note 95 85 0 "" NOTE_INSN_DELETED)

;; Function expand_start_else

;; 3 regs to allocate: 69 89 68
;; 68 conflicts: 68 69 0 8 14
;; 69 conflicts: 68 69 0 8 14
;; 89 conflicts: 89 0 14
;; 89 preferences: 8

;; Register dispositions:
68 in 10  69 in 9  71 in 8  75 in 8  83 in 8  85 in 16  
86 in 8  89 in 8  

;; Hard regs used:  0 8 9 10 15 16 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 8 "" NOTE_INSN_DELETED)

(call_insn 8 6 10 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 10 8 11 (set (reg:SI 10 %o2)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 8 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 11 10 14 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 14 11 16 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (insn_list 11 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 16 14 23 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 20)))
        (reg:SI 10 %o2)) 66 {movsi+1} (insn_list 10 (insn_list 14 (nil)))
    (nil))

(insn 23 16 24 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))
        (nil)))

(insn 24 23 25 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 23 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 25 24 37 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 38)
            (pc))) 55 {bleu+1} (insn_list 24 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 37 25 38 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 12)))
        (reg:SI 10 %o2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(code_label 38 37 40 199 "")

(insn 40 38 43 (set (reg:SI 16 %l0)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 43 40 45 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (insn_list 40 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("cond_stack"))))
        (nil)))

(insn 45 43 46 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 20)))) 66 {movsi+1} (insn_list 43 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 46 45 48 (use (reg:SI 8 %o0)) -1 (insn_list 45 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 48 46 53 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("emit_jump")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 53 48 55 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 16 %l0)
        (nil)))

(insn 55 53 56 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 16)))) 66 {movsi+1} (insn_list 53 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 56 55 57 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 55 (nil))
    (nil))

(jump_insn 57 56 64 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 68)
            (pc))) 55 {bleu+1} (insn_list 56 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 64 57 65 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 65 64 67 (use (reg:SI 8 %o0)) -1 (insn_list 64 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 67 65 68 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(code_label 68 67 73 200 "")

(note 73 68 0 "" NOTE_INSN_DELETED)

;; Function expand_end_else

;; 5 regs to allocate: 86 71 78 72 83
;; 71 conflicts: 71 0 14
;; 71 preferences: 8
;; 72 conflicts: 72 78 83 86 0 8 9 14 15
;; 78 conflicts: 72 78 83 86 0 8 9 14 15
;; 83 conflicts: 72 78 83 86 0 8 9 14 15
;; 86 conflicts: 72 78 83 86 0 8 9 14 15

;; Register dispositions:
68 in 16  70 in 8  71 in 8  72 in 18  73 in 8  75 in 8  
76 in 8  78 in 17  81 in 9  83 in 19  84 in 9  86 in 16  
87 in 9  90 in 8  

;; Hard regs used:  0 8 9 15 16 17 18 19 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 7 "" NOTE_INSN_BLOCK_BEG)

(insn 7 6 10 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 10 7 13 (set (reg/v:SI 16 %l0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (insn_list 7 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 13 10 16 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 16 13 17 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 20)))) 66 {movsi+1} (insn_list 10 (nil))
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 17 16 18 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 16 (nil))
    (nil))

(jump_insn 18 17 21 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 25)
            (pc))) 55 {bleu+1} (insn_list 17 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 21 18 22 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 22 21 24 (use (reg:SI 8 %o0)) -1 (insn_list 21 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 24 22 25 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(code_label 25 24 27 202 "")

(note 27 25 29 "" NOTE_INSN_LOOP_BEG)

(note 29 27 30 "" NOTE_INSN_BLOCK_BEG)

(insn 30 29 33 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 33 30 35 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("nesting_stack"))))) 66 {movsi+1} (insn_list 30 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 35 33 96 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (insn_list 33 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 96 35 98 (set (reg:SI 17 %l1)
        (high:SI (symbol_ref:SI ("cond_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("cond_stack")))
        (nil)))

(insn 98 96 100 (set (reg:SI 19 %l3)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 100 98 36 (set (reg:SI 16 %l0)
        (high:SI (symbol_ref:SI ("nesting_depth")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_depth")))
        (nil)))

(note 36 100 37 "" NOTE_INSN_LOOP_BEG)

(code_label 37 36 38 206 "")

(note 38 37 42 "" NOTE_INSN_BLOCK_BEG)

(insn 42 38 46 (set (reg/v:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("cond_stack"))))) 66 {movsi+1} (nil)
    (nil))

(insn 46 42 47 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 42 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("cond_stack"))))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                    (const_int 4)))
            (nil))))

(insn 47 46 51 (set (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("cond_stack"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 46 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 51 47 52 (set (reg:SI 9 %o1)
        (mem/s:SI (reg/v:SI 8 %o0))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 19 %l3)
                (symbol_ref:SI ("nesting_stack"))))
        (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 8 %o0))
            (nil))))

(insn 52 51 56 (set (mem:SI (lo_sum:SI (reg:SI 19 %l3)
                (symbol_ref:SI ("nesting_stack"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 51 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 56 52 57 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                    (const_int 8)))
            (nil))))

(insn 57 56 59 (set (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 56 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 59 57 60 (set (reg:SI 8 %o0)
        (reg/v:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 8 %o0)
        (nil)))

(insn 60 59 62 (use (reg:SI 8 %o0)) -1 (insn_list 59 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 62 60 63 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("free")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 63 62 64 "" NOTE_INSN_BLOCK_END)

(note 64 63 69 "" NOTE_INSN_LOOP_CONT)

(insn 69 64 70 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (nil)))

(insn 70 69 71 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (reg/v:SI 18 %l2))) 16 {sleu+1} (insn_list 69 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 71 70 74 (set (pc)
        (if_then_else (gt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 37)
            (pc))) 55 {bleu+1} (insn_list 70 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 74 71 76 "" NOTE_INSN_LOOP_END)

(note 76 74 77 "" NOTE_INSN_BLOCK_END)

(note 77 76 83 "" NOTE_INSN_LOOP_CONT)

(note 83 77 86 "" NOTE_INSN_LOOP_END)

(note 86 83 89 "" NOTE_INSN_DELETED)

(insn 89 86 91 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(note 91 89 101 "" NOTE_INSN_BLOCK_END)

(note 101 91 0 "" NOTE_INSN_DELETED)

;; Function expand_start_loop

;; 1 regs to allocate: 69
;; 69 conflicts: 69 0 8 9 14 15 24

;; Register dispositions:
68 in 24  69 in 16  71 in 8  72 in 8  74 in 8  75 in 8  
77 in 9  82 in 8  83 in 8  87 in 8  88 in 8  

;; Hard regs used:  0 8 9 15 16 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 11 "" NOTE_INSN_BLOCK_BEG)

(insn 11 8 12 (set (reg:SI 8 %o0)
        (const_int 40)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 40)
        (nil)))

(insn 12 11 14 (use (reg:SI 8 %o0)) -1 (insn_list 11 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 14 12 16 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("xmalloc")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 16 14 18 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 14 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 18 16 21 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 21 18 22 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 18 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 4)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 22 21 24 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 4)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 16 (insn_list 21 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 24 22 27 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 27 24 28 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("nesting_stack"))))) 66 {movsi+1} (insn_list 24 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 16 %l0))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 28 27 30 (set (mem/s:SI (reg/v:SI 16 %l0))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 27 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 30 28 37 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("nesting_depth")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_depth")))
        (nil)))

(insn 37 30 38 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("nesting_depth"))))) 66 {movsi+1} (insn_list 30 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("nesting_depth"))))
        (nil)))

(insn 38 37 42 (set (reg:SI 8 %o0)
        (plus:SI (reg:SI 8 %o0)
            (const_int 1))) 124 {addsi3} (insn_list 37 (nil))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 8)))
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(insn 42 38 44 (set (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("nesting_depth"))))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 38 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 44 42 47 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 8)))
        (reg:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 47 44 49 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 49 47 51 "" NOTE_INSN_DELETED)

(insn 51 49 54 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 16)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 47 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 54 51 56 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 56 54 58 "" NOTE_INSN_DELETED)

(insn 58 56 61 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 20)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 54 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 61 58 62 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 24)))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                    (const_int 16)))
            (nil))))

(insn 62 61 64 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 24)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 61 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 64 62 65 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 24 %i0)
            (const_int 0))) 16 {sleu+1} (insn_list 4 (nil))
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(jump_insn 65 64 67 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 71)
            (pc))) 55 {bleu+1} (insn_list 64 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 67 65 68 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                    (const_int 20)))
            (nil))))

(insn 68 67 69 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 67 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 69 68 70 (set (pc)
        (label_ref 74)) 205 {jump} (nil)
    (nil))

(barrier 70 69 71)

(code_label 71 70 73 211 "")

(insn 73 71 74 (set (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 12)))
        (const_int 0)) 66 {movsi+1} (nil)
    (nil))

(code_label 74 73 76 212 "")

(note 76 74 79 "" NOTE_INSN_DELETED)

(insn 79 76 81 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("loop_stack")))
                (reg/v:SI 16 %l0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(note 81 79 84 "" NOTE_INSN_DELETED)

(insn 84 81 87 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("nesting_stack")))
                (reg/v:SI 16 %l0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(call_insn 87 84 90 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(call_insn 90 87 93 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("emit_queue")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 93 90 96 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 96 93 94 (set (reg:SI 9 %o1)
        (const_int -4)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int -4)
        (nil)))

(insn 94 96 97 (use (reg:SI 8 %o0)) -1 (insn_list 93 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 97 94 99 (use (reg:SI 9 %o1)) -1 (insn_list 96 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 99 97 102 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_note")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 102 99 103 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(insn 103 102 105 (use (reg:SI 8 %o0)) -1 (insn_list 102 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 105 103 107 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 107 105 111 "" NOTE_INSN_BLOCK_END)

(note 111 107 0 "" NOTE_INSN_DELETED)

;; Function expand_start_loop_continue_elsewhere

;; Register dispositions:
70 in 9  72 in 9  

;; Hard regs used:  8 9 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(note 4 2 5 "" NOTE_INSN_DELETED)

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 10 "" NOTE_INSN_DELETED)

(insn 10 8 11 (set (reg:SI 8 %o0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(insn 11 10 13 (use (reg:SI 8 %o0)) -1 (insn_list 10 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 13 11 16 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_start_loop")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(call_insn 16 13 18 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 18 16 19 "" NOTE_INSN_DELETED)

(insn 19 18 22 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 22 19 24 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 19 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 24 22 29 (set (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 24)))
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 16 (insn_list 22 (nil)))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (expr_list:REG_DEAD (reg:SI 9 %o1)
            (nil))))

(note 29 24 0 "" NOTE_INSN_DELETED)

;; Function expand_loop_continue_here

;; Register dispositions:
68 in 8  70 in 8  

;; Hard regs used:  8 9 15 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 8 "" NOTE_INSN_BLOCK_BEG)

(call_insn 8 6 11 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 11 8 14 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 14 11 12 (set (reg:SI 9 %o1)
        (const_int -8)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int -8)
        (nil)))

(insn 12 14 15 (use (reg:SI 8 %o0)) -1 (insn_list 11 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 15 12 17 (use (reg:SI 9 %o1)) -1 (insn_list 14 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 17 15 19 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_note")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 19 17 22 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 22 19 24 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 19 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 24 22 25 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 24)))) 66 {movsi+1} (insn_list 22 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 25 24 27 (use (reg:SI 8 %o0)) -1 (insn_list 24 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 27 25 29 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 29 27 33 "" NOTE_INSN_BLOCK_END)

(note 33 29 0 "" NOTE_INSN_DELETED)

;; Function expand_end_loop

;; 13 regs to allocate: 99 109 115 129 68 161 153 79 147 158 122 69 107
;; 68 conflicts: 68 69 99 107 109 115 122 129 0 8 9 10 14 15 16
;; 69 conflicts: 68 69 79 99 107 109 115 122 129 0 8 9 10 14 15 16
;; 79 conflicts: 69 79 0 8 9 14
;; 99 conflicts: 68 69 99 107 122 0 8 14
;; 107 conflicts: 68 69 99 107 109 115 122 129 0 8 9 14
;; 109 conflicts: 68 69 107 109 122 0 8 14
;; 115 conflicts: 68 69 107 115 122 0 8 14
;; 122 conflicts: 68 69 99 107 109 115 122 129 0 8 9 14
;; 129 conflicts: 68 69 107 122 129 0 8 14
;; 147 conflicts: 147 153 158 161 0 8 9 14 15
;; 153 conflicts: 147 153 158 161 0 8 9 14 15
;; 158 conflicts: 147 153 158 161 0 8 9 14 15
;; 161 conflicts: 147 153 158 161 0 8 9 14 15

;; Register dispositions:
68 in 17  69 in 18  70 in 8  72 in 8  74 in 8  75 in 8  
76 in 8  79 in 10  80 in 8  85 in 8  86 in 9  87 in 8  
89 in 8  90 in 8  93 in 8  95 in 8  96 in 8  99 in 9  
100 in 8  105 in 8  106 in 8  107 in 11  109 in 9  110 in 8  
115 in 9  116 in 8  122 in 10  124 in 8  125 in 9  126 in 8  
127 in 8  128 in 8  129 in 9  130 in 8  139 in 9  140 in 8  
141 in 16  142 in 10  144 in 8  146 in 8  147 in 18  148 in 8  
150 in 8  151 in 8  153 in 17  156 in 9  158 in 19  159 in 9  
161 in 16  162 in 9  165 in 8  

;; Hard regs used:  0 8 9 10 11 15 16 17 18 19 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 8 "" NOTE_INSN_BLOCK_BEG)

(call_insn 8 6 10 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("get_last_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 10 8 12 (set (reg/v:SI 17 %l1)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 8 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 12 10 15 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 15 12 17 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 12 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 17 15 20 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 16)))) 66 {movsi+1} (insn_list 15 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 20 17 22 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 22 20 25 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("optimize")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("optimize")))
        (nil)))

(insn 25 22 26 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("optimize"))))) 66 {movsi+1} (insn_list 22 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 26 25 27 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 25 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 27 26 29 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 253)
            (pc))) 55 {bleu+1} (insn_list 26 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 29 27 30 "" NOTE_INSN_DELETED)

(note 30 29 31 "" NOTE_INSN_DELETED)

(insn 31 30 32 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg/v:SI 17 %l1)))) 95 {zero_extendhisi2+1} (nil)
    (nil))

(insn 32 31 33 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 14))) 16 {sleu+1} (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 33 32 35 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 64)
            (pc))) 55 {bleu+1} (insn_list 32 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 35 33 37 (set (reg:SI 10 %o2)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 17 %l1)
        (nil)))

(note 37 35 38 "" NOTE_INSN_DELETED)

(note 38 37 39 "" NOTE_INSN_DELETED)

(insn 39 38 40 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg:SI 10 %o2)))) 95 {zero_extendhisi2+1} (insn_list 35 (nil))
    (nil))

(insn 40 39 41 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 25))) 16 {sleu+1} (insn_list 39 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 41 40 44 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 64)
            (pc))) 55 {bleu+1} (insn_list 40 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 44 41 47 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("pc_rtx")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("pc_rtx")))
        (nil)))

(insn 47 44 49 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 4)))
        (nil)))

(insn 49 47 50 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("pc_rtx"))))) 66 {movsi+1} (insn_list 44 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 50 49 51 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 47 (insn_list 49 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 51 50 55 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 64)
            (pc))) 55 {bleu+1} (insn_list 50 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 55 51 57 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(note 57 55 58 "" NOTE_INSN_DELETED)

(note 58 57 59 "" NOTE_INSN_DELETED)

(insn 59 58 60 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg:SI 8 %o0)))) 95 {zero_extendhisi2+1} (insn_list 55 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 60 59 61 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 42))) 16 {sleu+1} (insn_list 59 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 61 60 64 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 253)
            (pc))) 55 {bleu+1} (insn_list 60 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(code_label 64 61 66 217 "")

(note 66 64 67 "" NOTE_INSN_DELETED)

(insn 67 66 70 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 70 67 72 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 67 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 72 70 348 (set (reg/v:SI 17 %l1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 16)))) 66 {movsi+1} (insn_list 70 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 348 72 349 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 17 %l1)
            (const_int 0))) 16 {sleu+1} (insn_list 72 (nil))
    (nil))

(jump_insn 349 348 360 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 189)
            (pc))) 55 {bleu+1} (insn_list 348 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 360 349 361 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("pc_rtx")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("pc_rtx")))
        (nil)))

(insn 361 360 363 (set (reg:SI 11 %o3)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("pc_rtx"))))) 66 {movsi+1} (insn_list 360 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 363 361 364 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 364 363 73 (set (reg:SI 10 %o2)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 363 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 73 364 183 "" NOTE_INSN_LOOP_BEG)

(code_label 183 73 79 224 "")

(note 79 183 80 "" NOTE_INSN_DELETED)

(note 80 79 81 "" NOTE_INSN_DELETED)

(insn 81 80 82 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg/v:SI 17 %l1)))) 95 {zero_extendhisi2+1} (nil)
    (nil))

(insn 82 81 83 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 14))) 16 {sleu+1} (insn_list 81 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 83 82 85 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 180)
            (pc))) 55 {bleu+1} (insn_list 82 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 85 83 87 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 16)))) 66 {movsi+1} (nil)
    (nil))

(note 87 85 88 "" NOTE_INSN_DELETED)

(note 88 87 89 "" NOTE_INSN_DELETED)

(insn 89 88 90 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg:SI 9 %o1)))) 95 {zero_extendhisi2+1} (insn_list 85 (nil))
    (nil))

(insn 90 89 91 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 25))) 16 {sleu+1} (insn_list 89 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 91 90 97 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 180)
            (pc))) 55 {bleu+1} (insn_list 90 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 97 91 100 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))
        (nil)))

(insn 100 97 101 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (reg:SI 11 %o3))) 16 {sleu+1} (insn_list 97 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 101 100 105 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 180)
            (pc))) 55 {bleu+1} (insn_list 100 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 105 101 107 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(note 107 105 108 "" NOTE_INSN_DELETED)

(note 108 107 109 "" NOTE_INSN_DELETED)

(insn 109 108 110 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg:SI 9 %o1)))) 95 {zero_extendhisi2+1} (insn_list 105 (nil))
    (nil))

(insn 110 109 111 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 42))) 16 {sleu+1} (insn_list 109 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 111 110 117 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 180)
            (pc))) 55 {bleu+1} (insn_list 110 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 117 111 119 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(note 119 117 120 "" NOTE_INSN_DELETED)

(note 120 119 121 "" NOTE_INSN_DELETED)

(insn 121 120 122 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg:SI 9 %o1)))) 95 {zero_extendhisi2+1} (insn_list 117 (nil))
    (nil))

(insn 122 121 123 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 38))) 16 {sleu+1} (insn_list 121 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 123 122 135 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 142)
            (pc))) 55 {bleu+1} (insn_list 122 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 135 123 137 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 137 135 138 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 20)))
        (nil)))

(insn 138 137 139 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 135 (insn_list 137 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 139 138 142 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 189)
            (pc))) 55 {bleu+1} (insn_list 138 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(code_label 142 139 144 223 "")

(insn 144 142 146 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 16)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 16)))
        (nil)))

(insn 146 144 148 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (insn_list 144 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 148 146 150 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 12)))) 66 {movsi+1} (insn_list 146 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(note 150 148 151 "" NOTE_INSN_DELETED)

(note 151 150 152 "" NOTE_INSN_DELETED)

(insn 152 151 153 (set (reg:SI 8 %o0)
        (zero_extend:SI (mem/s:HI (reg:SI 9 %o1)))) 95 {zero_extendhisi2+1} (insn_list 148 (nil))
    (nil))

(insn 153 152 154 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 38))) 16 {sleu+1} (insn_list 152 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 154 153 166 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 180)
            (pc))) 55 {bleu+1} (insn_list 153 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 166 154 168 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 4)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 168 166 169 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg:SI 10 %o2)
                (const_int 20)))
        (nil)))

(insn 169 168 170 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (reg:SI 8 %o0))) 16 {sleu+1} (insn_list 166 (insn_list 168 (nil)))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (expr_list:REG_DEAD (reg:SI 8 %o0)
            (nil))))

(jump_insn 170 169 179 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref/s 189)
            (pc))) 55 {bleu+1} (insn_list 169 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 179 170 180 "" NOTE_INSN_LOOP_CONT)

(code_label 180 179 182 220 "")

(insn 182 180 352 (set (reg/v:SI 17 %l1)
        (mem/s:SI (plus:SI (reg/v:SI 17 %l1)
                (const_int 12)))) 66 {movsi+1} (nil)
    (nil))

(note 352 182 75 "" NOTE_INSN_LOOP_VTOP)

(insn 75 352 76 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 17 %l1)
            (const_int 0))) 16 {sleu+1} (insn_list 182 (nil))
    (nil))

(jump_insn 76 75 188 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 183)
            (pc))) 55 {bleu+1} (insn_list 75 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 188 76 189 "" NOTE_INSN_LOOP_END)

(code_label 189 188 191 219 "")

(insn 191 189 192 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 17 %l1)
            (const_int 0))) 16 {sleu+1} (nil)
    (nil))

(jump_insn 192 191 194 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 253)
            (pc))) 55 {bleu+1} (insn_list 191 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 194 192 196 "" NOTE_INSN_BLOCK_BEG)

(call_insn 196 194 198 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_label_rtx")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 198 196 201 (set (reg/v:SI 16 %l0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 196 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 201 198 204 (set (reg:SI 8 %o0)
        (reg/v:SI 16 %l0)) 66 {movsi+1} (insn_list 198 (nil))
    (nil))

(insn 204 201 202 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 18 %l2)
                (const_int 8)))) 66 {movsi+1} (nil)
    (nil))

(insn 202 204 205 (use (reg:SI 8 %o0)) -1 (insn_list 201 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 205 202 207 (use (reg:SI 9 %o1)) -1 (insn_list 204 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 207 205 210 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label_after")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(call_insn 210 207 212 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("get_last_insn")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 212 210 214 (set (reg:SI 10 %o2)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 210 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 214 212 217 (set (reg:SI 8 %o0)
        (reg/v:SI 18 %l2)) 66 {movsi+1} (nil)
    (nil))

(insn 217 214 220 (set (reg:SI 9 %o1)
        (reg/v:SI 17 %l1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 17 %l1)
        (nil)))

(insn 220 217 215 (set (reg:SI 10 %o2)
        (reg:SI 10 %o2)) 66 {movsi+1} (insn_list 212 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(insn 215 220 218 (use (reg:SI 8 %o0)) -1 (insn_list 214 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 218 215 221 (use (reg:SI 9 %o1)) -1 (insn_list 217 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 221 218 223 (use (reg:SI 10 %o2)) -1 (insn_list 220 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 223 221 226 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("reorder_insns")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 226 223 227 (set (reg:SI 8 %o0)
        (reg/v:SI 18 %l2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 18 %l2)
        (nil)))

(insn 227 226 229 (use (reg:SI 8 %o0)) -1 (insn_list 226 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 229 227 231 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("gen_jump")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 231 229 233 "" NOTE_INSN_DELETED)

(insn 233 231 236 (set (reg:SI 8 %o0)
        (reg:SI 8 %o0)) 66 {movsi+1} (insn_list 229 (nil))
    (nil))

(insn 236 233 234 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 8)))) 66 {movsi+1} (nil)
    (nil))

(insn 234 236 237 (use (reg:SI 8 %o0)) -1 (insn_list 233 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 237 234 239 (use (reg:SI 9 %o1)) -1 (insn_list 236 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 239 237 242 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_jump_insn_after")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 242 239 243 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg/v:SI 16 %l0)
                (const_int 8)))) 66 {movsi+1} (nil)
    (nil))

(insn 243 242 245 (use (reg:SI 8 %o0)) -1 (insn_list 242 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 245 243 248 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_barrier_after")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 248 245 250 (set (reg/v:SI 18 %l2)
        (reg/v:SI 16 %l0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 16 %l0)
        (nil)))

(note 250 248 253 "" NOTE_INSN_BLOCK_END)

(code_label 253 250 256 216 "")

(insn 256 253 257 (set (reg:SI 8 %o0)
        (reg/v:SI 18 %l2)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 18 %l2)
        (nil)))

(insn 257 256 259 (use (reg:SI 8 %o0)) -1 (insn_list 256 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 259 257 262 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("emit_jump")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 262 259 265 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 265 262 263 (set (reg:SI 9 %o1)
        (const_int -5)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int -5)
        (nil)))

(insn 263 265 266 (use (reg:SI 8 %o0)) -1 (insn_list 262 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 266 263 268 (use (reg:SI 9 %o1)) -1 (insn_list 265 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(call_insn 268 266 270 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_note")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(insn 270 268 273 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 273 270 275 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 270 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 275 273 276 (set (reg:SI 8 %o0)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 20)))) 66 {movsi+1} (insn_list 273 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 276 275 278 (use (reg:SI 8 %o0)) -1 (insn_list 275 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 278 276 280 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("emit_label")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 280 278 282 "" NOTE_INSN_LOOP_BEG)

(note 282 280 283 "" NOTE_INSN_BLOCK_BEG)

(insn 283 282 286 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 286 283 288 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("nesting_stack"))))) 66 {movsi+1} (insn_list 283 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 288 286 354 (set (reg/v:SI 18 %l2)
        (mem/s:SI (plus:SI (reg:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (insn_list 286 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 354 288 356 (set (reg:SI 17 %l1)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 356 354 358 (set (reg:SI 19 %l3)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 358 356 289 (set (reg:SI 16 %l0)
        (high:SI (symbol_ref:SI ("nesting_depth")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_depth")))
        (nil)))

(note 289 358 290 "" NOTE_INSN_LOOP_BEG)

(code_label 290 289 291 229 "")

(note 291 290 295 "" NOTE_INSN_BLOCK_BEG)

(insn 295 291 299 (set (reg/v:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (nil)
    (nil))

(insn 299 295 300 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 4)))) 66 {movsi+1} (insn_list 295 (nil))
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("loop_stack"))))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                    (const_int 4)))
            (nil))))

(insn 300 299 304 (set (mem:SI (lo_sum:SI (reg:SI 17 %l1)
                (symbol_ref:SI ("loop_stack"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 299 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 304 300 305 (set (reg:SI 9 %o1)
        (mem/s:SI (reg/v:SI 8 %o0))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 19 %l3)
                (symbol_ref:SI ("nesting_stack"))))
        (expr_list:REG_EQUIV (mem/s:SI (reg/v:SI 8 %o0))
            (nil))))

(insn 305 304 309 (set (mem:SI (lo_sum:SI (reg:SI 19 %l3)
                (symbol_ref:SI ("nesting_stack"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 304 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 309 305 310 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 8)))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (expr_list:REG_EQUIV (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                    (const_int 8)))
            (nil))))

(insn 310 309 312 (set (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (reg:SI 9 %o1)) 66 {movsi+1} (insn_list 309 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 312 310 313 (set (reg:SI 8 %o0)
        (reg/v:SI 8 %o0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 8 %o0)
        (nil)))

(insn 313 312 315 (use (reg:SI 8 %o0)) -1 (insn_list 312 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 315 313 316 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("free")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 316 315 317 "" NOTE_INSN_BLOCK_END)

(note 317 316 322 "" NOTE_INSN_LOOP_CONT)

(insn 322 317 323 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))) 66 {movsi+1} (nil)
    (expr_list:REG_EQUIV (mem:SI (lo_sum:SI (reg:SI 16 %l0)
                (symbol_ref:SI ("nesting_depth"))))
        (nil)))

(insn 323 322 324 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (reg/v:SI 18 %l2))) 16 {sleu+1} (insn_list 322 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 324 323 327 (set (pc)
        (if_then_else (gt (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 290)
            (pc))) 55 {bleu+1} (insn_list 323 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 327 324 329 "" NOTE_INSN_LOOP_END)

(note 329 327 330 "" NOTE_INSN_BLOCK_END)

(note 330 329 336 "" NOTE_INSN_LOOP_CONT)

(note 336 330 339 "" NOTE_INSN_LOOP_END)

(note 339 336 342 "" NOTE_INSN_DELETED)

(insn 342 339 344 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(note 344 342 365 "" NOTE_INSN_BLOCK_END)

(note 365 344 0 "" NOTE_INSN_DELETED)

;; Function expand_continue_loop

;; 1 regs to allocate: 72
;; 72 conflicts: 72 0 8 14

;; Register dispositions:
71 in 8  72 in 9  

;; Hard regs used:  0 8 9 10 15 24 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 7 "" NOTE_INSN_DELETED)

(note 7 6 10 "" NOTE_INSN_DELETED)

(insn 10 7 12 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(insn 12 10 15 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 15 12 16 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 12 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 16 15 17 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 15 (nil))
    (nil))

(jump_insn 17 16 31 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 24)
            (pc))) 55 {bleu+1} (insn_list 16 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 31 17 34 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 34 31 37 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 24)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 37 34 32 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 32 37 35 (use (reg:SI 8 %o0)) -1 (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 35 32 38 (use (reg:SI 9 %o1)) -1 (insn_list 34 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 38 35 40 (use (reg:SI 10 %o2)) -1 (insn_list 37 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 40 38 43 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_goto_internal")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 43 40 45 (set (reg/i:SI 24 %i0)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(jump_insn 45 43 23 (set (pc)
        (label_ref 52)) 205 {jump} (nil)
    (nil))

(barrier 23 45 24)

(code_label 24 23 20 239 "")

(insn 20 24 52 (set (reg/i:SI 24 %i0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(code_label 52 20 51 240 "")

(insn 51 52 53 (use (reg/i:SI 24 %i0)) -1 (nil)
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 53 51 0 "" NOTE_INSN_DELETED)

;; Function expand_exit_loop

;; 1 regs to allocate: 72
;; 72 conflicts: 72 0 8 14

;; Register dispositions:
71 in 8  72 in 9  

;; Hard regs used:  0 8 9 10 15 24 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 7 "" NOTE_INSN_DELETED)

(note 7 6 10 "" NOTE_INSN_DELETED)

(insn 10 7 12 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(insn 12 10 15 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 15 12 16 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 12 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 16 15 17 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 15 (nil))
    (nil))

(jump_insn 17 16 31 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 24)
            (pc))) 55 {bleu+1} (insn_list 16 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 31 17 34 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 34 31 37 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 37 34 32 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 32 37 35 (use (reg:SI 8 %o0)) -1 (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 35 32 38 (use (reg:SI 9 %o1)) -1 (insn_list 34 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 38 35 40 (use (reg:SI 10 %o2)) -1 (insn_list 37 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 40 38 43 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_goto_internal")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 43 40 45 (set (reg/i:SI 24 %i0)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(jump_insn 45 43 23 (set (pc)
        (label_ref 52)) 205 {jump} (nil)
    (nil))

(barrier 23 45 24)

(code_label 24 23 20 242 "")

(insn 20 24 52 (set (reg/i:SI 24 %i0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(code_label 52 20 51 243 "")

(insn 51 52 53 (use (reg/i:SI 24 %i0)) -1 (nil)
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 53 51 0 "" NOTE_INSN_DELETED)

;; Function expand_exit_loop_if_false

;; 2 regs to allocate: 73 68
;; 68 conflicts: 68 73 0 8 14
;; 68 preferences: 24
;; 73 conflicts: 68 73 0 8 14

;; Register dispositions:
68 in 24  72 in 8  73 in 9  

;; Hard regs used:  0 8 9 10 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 9 "" NOTE_INSN_DELETED)

(note 9 8 12 "" NOTE_INSN_DELETED)

(insn 12 9 14 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(insn 14 12 17 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("loop_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("loop_stack")))
        (nil)))

(insn 17 14 18 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("loop_stack"))))) 66 {movsi+1} (insn_list 14 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 18 17 19 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 17 (nil))
    (nil))

(jump_insn 19 18 33 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 26)
            (pc))) 55 {bleu+1} (insn_list 18 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(insn 33 19 36 (set (reg:SI 8 %o0)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 36 33 39 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg:SI 9 %o1)
                (const_int 20)))) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 39 36 34 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 34 39 37 (use (reg:SI 8 %o0)) -1 (insn_list 33 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 37 34 40 (use (reg:SI 9 %o1)) -1 (insn_list 36 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 40 37 42 (use (reg:SI 10 %o2)) -1 (insn_list 39 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 42 40 45 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("do_jump")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 45 42 47 (set (reg/i:SI 24 %i0)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(jump_insn 47 45 25 (set (pc)
        (label_ref 54)) 205 {jump} (nil)
    (nil))

(barrier 25 47 26)

(code_label 26 25 22 245 "")

(insn 22 26 54 (set (reg/i:SI 24 %i0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(code_label 54 22 53 246 "")

(insn 53 54 55 (use (reg/i:SI 24 %i0)) -1 (nil)
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 55 53 0 "" NOTE_INSN_DELETED)

;; Function expand_exit_something

;; 2 regs to allocate: 68 73
;; 68 conflicts: 68 73 0 14
;; 73 conflicts: 68 73 0 8 14
;; 73 preferences: 9

;; Register dispositions:
68 in 8  72 in 8  73 in 9  

;; Hard regs used:  0 8 9 10 15 24 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 8 "" NOTE_INSN_BLOCK_BEG)

(note 8 6 11 "" NOTE_INSN_DELETED)

(insn 11 8 13 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(insn 13 11 16 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("nesting_stack")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("nesting_stack")))
        (nil)))

(insn 16 13 70 (set (reg/v:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("nesting_stack"))))) 66 {movsi+1} (insn_list 13 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 70 16 71 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 16 (nil))
    (nil))

(jump_insn 71 70 17 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 58)
            (pc))) 55 {bleu+1} (insn_list 70 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 17 71 52 "" NOTE_INSN_LOOP_BEG)

(code_label 52 17 23 252 "")

(insn 23 52 24 (set (reg:SI 9 %o1)
        (mem/s:SI (plus:SI (reg/v:SI 8 %o0)
                (const_int 12)))) 66 {movsi+1} (nil)
    (nil))

(insn 24 23 25 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 9 %o1)
            (const_int 0))) 16 {sleu+1} (insn_list 23 (nil))
    (nil))

(jump_insn 25 24 27 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 49)
            (pc))) 55 {bleu+1} (insn_list 24 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 27 25 29 "" NOTE_INSN_DELETED)

(insn 29 27 32 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 32 29 35 (set (reg:SI 9 %o1)
        (reg:SI 9 %o1)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 35 32 30 (set (reg:SI 10 %o2)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 30 35 33 (use (reg:SI 8 %o0)) -1 (insn_list 29 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 33 30 36 (use (reg:SI 9 %o1)) -1 (insn_list 32 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 36 33 38 (use (reg:SI 10 %o2)) -1 (insn_list 35 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 38 36 41 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_goto_internal")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(insn 41 38 43 (set (reg/i:SI 24 %i0)
        (const_int 1)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 1)
        (nil)))

(jump_insn 43 41 44 (set (pc)
        (label_ref/s 76)) 205 {jump} (nil)
    (nil))

(barrier 44 43 48)

(note 48 44 49 "" NOTE_INSN_LOOP_CONT)

(code_label 49 48 51 250 "")

(insn 51 49 74 (set (reg/v:SI 8 %o0)
        (mem/s:SI (reg/v:SI 8 %o0))) 66 {movsi+1} (nil)
    (nil))

(note 74 51 19 "" NOTE_INSN_LOOP_VTOP)

(insn 19 74 20 (set (reg:CC 0 %g0)
        (compare:CC (reg/v:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 51 (nil))
    (nil))

(jump_insn 20 19 57 (set (pc)
        (if_then_else (ne (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 52)
            (pc))) 55 {bleu+1} (insn_list 19 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 57 20 58 "" NOTE_INSN_LOOP_END)

(code_label 58 57 61 249 "")

(insn 61 58 76 (set (reg/i:SI 24 %i0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(code_label 76 61 75 253 "")

(insn 75 76 66 (use (reg/i:SI 24 %i0)) -1 (nil)
    (expr_list:REG_DEAD (reg/i:SI 24 %i0)
        (nil)))

(note 66 75 77 "" NOTE_INSN_BLOCK_END)

(note 77 66 0 "" NOTE_INSN_DELETED)

;; Function expand_null_return

;; Register dispositions:


;; Hard regs used:  8 15 30

(note 2 0 3 "" NOTE_INSN_DELETED)

(note 3 2 4 "" NOTE_INSN_FUNCTION_BEG)

(note 4 3 6 "" NOTE_INSN_DELETED)

(note 6 4 8 "" NOTE_INSN_DELETED)

(insn 8 6 9 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 9 8 11 (use (reg:SI 8 %o0)) -1 (insn_list 8 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(call_insn 11 9 16 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_null_return_1")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 16 11 0 "" NOTE_INSN_DELETED)

;; Function expand_null_return_1

;; 1 regs to allocate: 68
;; 68 conflicts: 68 0 8 9 14 15
;; 68 preferences: 24

;; Register dispositions:
68 in 24  72 in 8  73 in 8  75 in 9  78 in 9  

;; Hard regs used:  0 8 9 10 15 24 30

(note 2 0 4 "" NOTE_INSN_DELETED)

(insn 4 2 5 (set (reg/v:SI 24 %i0)
        (reg:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg:SI 24 %i0)
        (nil)))

(note 5 4 6 "" NOTE_INSN_FUNCTION_BEG)

(note 6 5 8 "" NOTE_INSN_DELETED)

(note 8 6 10 "" NOTE_INSN_BLOCK_BEG)

(call_insn 10 8 13 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("clear_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(call_insn 13 10 15 (parallel[ 
            (set (reg:SI 8 %o0)
                (call (mem:SI (symbol_ref:SI ("do_pending_stack_adjust")))
                    (const_int 0)))
            (clobber (reg:SI 15 %o7))
        ] ) 217 {untyped_call-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (expr_list:REG_UNUSED (reg:SI 15 %o7)
            (nil))))

(note 15 13 18 "" NOTE_INSN_DELETED)

(insn 18 15 20 (parallel[ 
            (set (mem:SI (symbol_ref:SI ("last_expr_type")))
                (const_int 0))
            (clobber (reg:SI 8 %o0))
        ] ) 74 {movdi-1} (nil)
    (expr_list:REG_UNUSED (reg:SI 8 %o0)
        (nil)))

(insn 20 18 23 (set (reg:SI 8 %o0)
        (high:SI (symbol_ref:SI ("current_function_returns_pcc_struct")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("current_function_returns_pcc_struct")))
        (nil)))

(insn 23 20 24 (set (reg:SI 8 %o0)
        (mem:SI (lo_sum:SI (reg:SI 8 %o0)
                (symbol_ref:SI ("current_function_returns_pcc_struct"))))) 66 {movsi+1} (insn_list 20 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 24 23 25 (set (reg:CC 0 %g0)
        (compare:CC (reg:SI 8 %o0)
            (const_int 0))) 16 {sleu+1} (insn_list 23 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(jump_insn 25 24 27 (set (pc)
        (if_then_else (eq (reg:CC 0 %g0)
                (const_int 0))
            (label_ref 67)
            (pc))) 55 {bleu+1} (insn_list 24 (nil))
    (expr_list:REG_DEAD (reg:CC 0 %g0)
        (nil)))

(note 27 25 28 "" NOTE_INSN_DELETED)

(insn 28 27 31 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("return_label")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("return_label")))
        (nil)))

(insn 31 28 34 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 34 31 37 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("return_label"))))) 66 {movsi+1} (insn_list 28 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 37 34 32 (set (reg:SI 10 %o2)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 32 37 35 (use (reg:SI 8 %o0)) -1 (insn_list 31 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 35 32 38 (use (reg:SI 9 %o1)) -1 (insn_list 34 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 38 35 40 (use (reg:SI 10 %o2)) -1 (insn_list 37 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 40 38 42 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_goto_internal")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(jump_insn 42 40 43 (set (pc)
        (label_ref 86)) 205 {jump} (nil)
    (nil))

(barrier 43 42 50)

(note 50 43 67 "" NOTE_INSN_DELETED)

(code_label 67 50 69 258 "")

(insn 69 67 72 (set (reg:SI 9 %o1)
        (high:SI (symbol_ref:SI ("return_label")))) 70 {movsi+5} (nil)
    (expr_list:REG_EQUIV (high:SI (symbol_ref:SI ("return_label")))
        (nil)))

(insn 72 69 75 (set (reg:SI 8 %o0)
        (const_int 0)) 66 {movsi+1} (nil)
    (expr_list:REG_EQUAL (const_int 0)
        (nil)))

(insn 75 72 78 (set (reg:SI 9 %o1)
        (mem:SI (lo_sum:SI (reg:SI 9 %o1)
                (symbol_ref:SI ("return_label"))))) 66 {movsi+1} (insn_list 69 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 78 75 73 (set (reg:SI 10 %o2)
        (reg/v:SI 24 %i0)) 66 {movsi+1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 24 %i0)
        (nil)))

(insn 73 78 76 (use (reg:SI 8 %o0)) -1 (insn_list 72 (nil))
    (expr_list:REG_DEAD (reg:SI 8 %o0)
        (nil)))

(insn 76 73 79 (use (reg:SI 9 %o1)) -1 (insn_list 75 (nil))
    (expr_list:REG_DEAD (reg:SI 9 %o1)
        (nil)))

(insn 79 76 81 (use (reg:SI 10 %o2)) -1 (insn_list 78 (nil))
    (expr_list:REG_DEAD (reg:SI 10 %o2)
        (nil)))

(call_insn 81 79 83 (parallel[ 
            (call (mem:SI (symbol_ref:SI ("expand_goto_internal")))
                (const_int 0))
            (clobber (reg:SI 15 %o7))
        ] ) 212 {call+2} (nil)
    (expr_list:REG_UNUSED (reg:SI 15 %o7)
        (nil)))

(note 83 81 86 "" NOTE_INSN_BLOCK_END)

(code_label 86 83 87 256 "")

(note 87 86 0 "" NOTE_INSN_DELETED)
